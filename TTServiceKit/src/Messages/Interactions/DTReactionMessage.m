//
//  DTReactionMessage.m
//  TTServiceKit
//
//  Created by Ethan on 2022/5/20.
//

#import "DTReactionMessage.h"
#import "TSIncomingMessage.h"
#import "TSOutgoingMessage.h"
#import "TSAccountManager.h"
#import <TTServiceKit/TTServiceKit-Swift.h>

@interface DTReactionMessage ()

@end

@implementation DTReactionMessage

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
                  conversationId:(NSString *)conversationId
                           emoji:(NSString *)emoji
                originalUniqueId:(NSString *)originalUniqueId
                       ownSource:(DTRealSourceEntity *)ownSource
                    removeAction:(BOOL)removeAction
                          source:(DTRealSourceEntity *)source
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId];

    if (!self) {
        return self;
    }

    _conversationId = conversationId;
    _emoji = emoji;
    _originalUniqueId = originalUniqueId;
    _ownSource = ownSource;
    _removeAction = removeAction;
    _source = source;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

+ (NSString *)collection {
    
    return @"DTReactionMessage";
}

- (instancetype)initWithEmoji:(NSString *)emoji
                       source:(DTRealSourceEntity *)source
                       remove:(BOOL)remove {
    
    if (self = [super init]) {
        _emoji = emoji;
        _source = source;
        _removeAction = remove;
        _originalUniqueId = [TSInteraction generateUniqueIdWithAuthorId:source.source deviceId:source.sourceDevice timestamp:source.timestamp];
    }
    
    return self;
}

- (void)saveWithTransaction:(SDSAnyWriteTransaction *)transaction {
    
    TSMessage *origionMessage = [self.source findMessageWithTransaction:transaction];
    if (!origionMessage) {
        DTReactionMessage *oldReactionMessage = [self findOldReactionMessageWithTransaction:transaction];
       
        if (!oldReactionMessage) {
            [self anyInsertWithTransaction:transaction];
            return;
        }
        
        if (self.ownSource.timestamp < oldReactionMessage.ownSource.timestamp) {
            if (oldReactionMessage.removeAction) {
                [oldReactionMessage anyRemoveWithTransaction:transaction];
            } else {
                return;
            }
        } else {
            [oldReactionMessage anyRemoveWithTransaction:transaction];
            if (!self.removeAction) {
                [self anyInsertWithTransaction:transaction];
            }
        }
        return;
    }
    
    [self relateReactionMessageWithOriginMessage:origionMessage transaction:transaction];
}

- (void)relateReactionMessageWithOriginMessage:(TSMessage *)origionMessage
                                   transaction:(SDSAnyWriteTransaction *)transaction {
    
    DTReactionSource *reactionSource = [DTReactionSource new];
    reactionSource.source = self.ownSource.source;
    reactionSource.timestamp = self.ownSource.timestamp;
    reactionSource.remove = self.removeAction;
    
    NSMutableDictionary *origionMessageReactionMap = nil;
    if (!origionMessage.reactionMap || origionMessage.reactionMap.count == 0) {
        origionMessageReactionMap = @{}.mutableCopy;
        origionMessageReactionMap[self.emoji] = @[reactionSource];
    } else {
        origionMessageReactionMap = origionMessage.reactionMap.mutableCopy;
        NSArray <NSString *> *emojis = origionMessage.reactionMap.allKeys;
        if ([emojis containsObject:self.emoji]) {
            NSMutableArray <DTReactionSource *> *tmpSources = [origionMessage.reactionMap[self.emoji] mutableCopy];
            __block DTReactionSource *oldSource = nil;
            [tmpSources enumerateObjectsUsingBlock:^(DTReactionSource * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                if ([obj.source isEqualToString:reactionSource.source]) {
                    oldSource = obj;
                    *stop = YES;
                }
            }];
            if (!oldSource) {
                [tmpSources addObject:reactionSource];
            } else {
                if (reactionSource.timestamp < oldSource.timestamp) {
                    if (oldSource.isRemove) {
                        [tmpSources removeObject:oldSource];
                    } else {
                        return;
                    }
                } else {
                    [tmpSources removeObject:oldSource];
                    if (!reactionSource.isRemove) {
                        [tmpSources addObject:reactionSource];
                    }
                }
            }
            if (tmpSources.count == 0) {
                [origionMessageReactionMap removeObjectForKey:self.emoji];
            } else {
                origionMessageReactionMap[self.emoji] = tmpSources.copy;
            }
        } else {
            origionMessageReactionMap[self.emoji] = @[reactionSource];
        }
    }
    
    [origionMessage anyUpdateMessageWithTransaction:transaction
                                              block:^(TSMessage * instance) {
        instance.reactionMap = origionMessageReactionMap.copy;
    }];
}

+ (DTReactionMessage *)reactionWithProto:(DSKProtoDataMessage *)dataMessage {
    
    OWSAssertDebug(dataMessage);

    if (!dataMessage.reaction) {
        OWSLogError(@"reaction is nil");
        return nil;
    }
    
    if (!dataMessage.reaction.source) {
        OWSLogError(@"reaction source is nil");
        return nil;
    }
    
    DSKProtoDataMessageReaction *reactionProto = dataMessage.reaction;
    DSKProtoRealSource *sourceProto = dataMessage.reaction.source;
    
    DTRealSourceEntity *source = [[DTRealSourceEntity alloc] initSourceWithTimestamp:sourceProto.timestamp sourceDevice:sourceProto.sourceDevice source:sourceProto.source];
    DTReactionMessage *reaction = [[DTReactionMessage alloc] initWithEmoji:reactionProto.emoji source:source remove:reactionProto.remove];
    
    return reaction;
}

+ (nullable DSKProtoDataMessageReaction *)reactionProtoWithReaction:(nullable DTReactionMessage *)reaction {
    
    if (!reaction) {
        return nil;
    }
    
    DSKProtoDataMessageReactionBuilder *builder = [DSKProtoDataMessageReaction builder];
    builder.emoji = reaction.emoji;
    builder.remove = reaction.removeAction;
    DSKProtoRealSourceBuilder *sourceBuilder = [DSKProtoRealSource builder];
    sourceBuilder.timestamp = reaction.source.timestamp;
    sourceBuilder.sourceDevice = reaction.source.sourceDevice;
    sourceBuilder.source = reaction.source.source;
    builder.source = [sourceBuilder buildAndReturnError:nil];
    
    return [builder buildAndReturnError:nil];
}

//MARK: 查找相同表情的历史记录
- (nullable DTReactionMessage *)findOldReactionMessageWithTransaction:(SDSAnyWriteTransaction *)transaction {
    
    NSArray <DTReactionMessage *> *reactionMessages = [[self class] findReactionMessagesWithRealSource:self.source transaction:transaction];
    
    if (reactionMessages.count == 0) {
        return nil;
    }
    
    __block DTReactionMessage *oldReactionMessage = nil;
    [reactionMessages enumerateObjectsUsingBlock:^(DTReactionMessage * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        if ([obj.emoji isEqualToString:self.emoji]) {
            oldReactionMessage = obj;
            *stop = YES;
        }
    }];
    
    return oldReactionMessage;
}

//MARK: 查找某条消息关联的所有reactionMessage
+ (NSArray <DTReactionMessage *> *)findReactionMessagesWithMessage:(TSMessage *)message
                                                       transaction:(SDSAnyWriteTransaction *)transaction {
    
    NSString *authorId = nil;
    if ([message isKindOfClass:TSOutgoingMessage.class]) {
        authorId = [[TSAccountManager shared] localNumberWithTransaction:transaction];
    } else {
        authorId = ((TSIncomingMessage *)message).authorId;
    }
    DTRealSourceEntity *realSource = [DTRealSourceEntity new];
    realSource.timestamp = message.timestamp;
    realSource.source = authorId;
    
    return [[self class] findReactionMessagesWithRealSource:realSource transaction:transaction];;
}

+ (NSArray <DTReactionMessage *> *)findReactionMessagesWithRealSource:(DTRealSourceEntity *)realSource transaction:(SDSAnyWriteTransaction *)transaction {
    
    NSError *error;
    NSString *originalUniqueId = [TSInteraction generateUniqueIdWithAuthorId:realSource.source deviceId:realSource.sourceDevice timestamp:realSource.timestamp];
    NSArray <DTReactionMessage *> * results = [ReactionFinder findReactionsWithOriginalUniqueId:originalUniqueId
                                                                                    transaction:transaction
                                                                                          error:&error];
    return results;
}

@end

@implementation DTReactionSource

@end
