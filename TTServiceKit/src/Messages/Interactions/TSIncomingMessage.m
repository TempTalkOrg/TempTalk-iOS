//
//  Copyright (c) 2018 Open Whisper Systems. All rights reserved.
//

#import "TSIncomingMessage.h"
#import <SignalCoreKit/NSDate+OWS.h>
#import "NSNotificationCenter+OWS.h"
#import "OWSDisappearingMessagesConfiguration.h"
#import "OWSReadReceiptManager.h"
#import "TSAttachmentPointer.h"
#import "TSContactThread.h"
#import "TSGroupThread.h"
#import "OWSDevice.h"
#import <TTServiceKit/TTServiceKit-Swift.h>

NS_ASSUME_NONNULL_BEGIN

@interface TSIncomingMessage ()

@property (nonatomic, getter=wasRead) BOOL read;

@end

#pragma mark -

@implementation TSIncomingMessage

- (instancetype)initWithCoder:(NSCoder *)coder
{
    self = [super initWithCoder:coder];
    if (!self) {
        return self;
    }

    return self;
}

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
        associatedUniqueThreadId:(NSString *)associatedUniqueThreadId
                notifySequenceId:(uint64_t)notifySequenceId
             receivedAtTimestamp:(uint64_t)receivedAtTimestamp
                      sequenceId:(uint64_t)sequenceId
                 serverTimestamp:(uint64_t)serverTimestamp
                       timestamp:(uint64_t)timestamp
                  uniqueThreadId:(NSString *)uniqueThreadId
                       atPersons:(nullable NSString *)atPersons
                   attachmentIds:(NSArray<NSString *> *)attachmentIds
                            body:(nullable NSString *)body
                            card:(nullable DTCardMessageEntity *)card
                    cardUniqueId:(nullable NSString *)cardUniqueId
                     cardVersion:(unsigned int)cardVersion
       combinedForwardingMessage:(nullable DTCombinedForwardingMessage *)combinedForwardingMessage
                    contactShare:(nullable OWSContact *)contactShare
                        editable:(BOOL)editable
                   envelopSource:(nullable NSString *)envelopSource
                 expireStartedAt:(uint64_t)expireStartedAt
                       expiresAt:(uint64_t)expiresAt
                expiresInSeconds:(unsigned int)expiresInSeconds
                 isPinnedMessage:(BOOL)isPinnedMessage
                        mentions:(nullable NSArray<DTMention *> *)mentions
                 messageModeType:(TSMessageModeType)messageModeType
                           pinId:(nullable NSString *)pinId
                   quotedMessage:(nullable TSQuotedMessage *)quotedMessage
                     reactionMap:(nullable NSDictionary<NSString *,NSArray<DTReactionSource *> *> *)reactionMap
                 reactionMessage:(nullable DTReactionMessage *)reactionMessage
                          recall:(nullable DTRecallMessage *)recall
    storedShouldStartExpireTimer:(BOOL)storedShouldStartExpireTimer
                translateMessage:(nullable DTTranslateMessage *)translateMessage
              whisperMessageType:(TSWhisperMessageType)whisperMessageType
                        authorId:(NSString *)authorId
                mentionedMsgType:(OWSMentionedMsgType)mentionedMsgType
                            read:(BOOL)read
                  sourceDeviceId:(unsigned int)sourceDeviceId
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId
          associatedUniqueThreadId:associatedUniqueThreadId
                  notifySequenceId:notifySequenceId
               receivedAtTimestamp:receivedAtTimestamp
                        sequenceId:sequenceId
                   serverTimestamp:serverTimestamp
                         timestamp:timestamp
                    uniqueThreadId:uniqueThreadId
                         atPersons:atPersons
                     attachmentIds:attachmentIds
                              body:body
                              card:card
                      cardUniqueId:cardUniqueId
                       cardVersion:cardVersion
         combinedForwardingMessage:combinedForwardingMessage
                      contactShare:contactShare
                          editable:editable
                     envelopSource:envelopSource
                   expireStartedAt:expireStartedAt
                         expiresAt:expiresAt
                  expiresInSeconds:expiresInSeconds
                   isPinnedMessage:isPinnedMessage
                          mentions:mentions
                   messageModeType:messageModeType
                             pinId:pinId
                     quotedMessage:quotedMessage
                       reactionMap:reactionMap
                   reactionMessage:reactionMessage
                            recall:recall
      storedShouldStartExpireTimer:storedShouldStartExpireTimer
                  translateMessage:translateMessage
                whisperMessageType:whisperMessageType];

    if (!self) {
        return self;
    }

    _authorId = authorId;
    _mentionedMsgType = mentionedMsgType;
    _read = read;
    _sourceDeviceId = sourceDeviceId;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

- (instancetype)initIncomingMessageWithTimestamp:(uint64_t)timestamp
                                 serverTimestamp:(uint64_t)serverTimestamp
                                      sequenceId:(uint64_t)sequenceId
                                notifySequenceId:(uint64_t)notifySequenceId
                                        inThread:(nullable TSThread *)thread
                                        authorId:(NSString *)authorId
                                  sourceDeviceId:(uint32_t)sourceDeviceId
                                     messageBody:(nullable NSString *)body
                                       atPersons:(nullable NSString *)atPersons
                                        mentions:(nullable NSArray <DTMention *> *)mentions
                                   attachmentIds:(NSArray<NSString *> *)attachmentIds
                                expiresInSeconds:(uint32_t)expiresInSeconds
                                   quotedMessage:(nullable TSQuotedMessage *)quotedMessage
                               forwardingMessage:(nullable DTCombinedForwardingMessage *)forwardingMessage
                                    contactShare:(nullable OWSContact *)contactShare
{
    self = [super initMessageWithTimestamp:timestamp
                           serverTimestamp:serverTimestamp
                                sequenceId:sequenceId
                          notifySequenceId:notifySequenceId
                                  inThread:thread
                                  authorId:authorId
                                  deviceId:sourceDeviceId
                               messageBody:body
                                 atPersons:atPersons
                                  mentions:mentions
                             attachmentIds:attachmentIds
                          expiresInSeconds:expiresInSeconds
                           expireStartedAt:0
                             quotedMessage:quotedMessage
                         forwardingMessage:forwardingMessage
                              contactShare:contactShare];

    if (!self) {
        return self;
    }

    _authorId = authorId;
    _sourceDeviceId = sourceDeviceId;
    _read = NO;
    
    [self updateMentionedMsgType];

    return self;
}

- (void)updateMentionedMsgType {
    NSString *localNumber = [TSAccountManager shared].localNumber;
    OWSMentionedMsgType mentionedMsgType = OWSMentionedMsgTypeNone;
    if(!self.atPersons.length){
        mentionedMsgType = OWSMentionedMsgTypeNone;
    } else if (DTParamsUtils.validateString(localNumber) && [self.atPersons containsString:localNumber]) {
        mentionedMsgType = OWSMentionedMsgTypeMe;
    } else if ([self.atPersons containsString:@"MENTIONS_ALL"]) {
        mentionedMsgType = OWSMentionedMsgTypeAll;
    } else {
        mentionedMsgType = OWSMentionedMsgTypeOthers;
    }
    _mentionedMsgType = mentionedMsgType;
}

+ (nullable instancetype)findMessageWithAuthorId:(NSString *)authorId
                                        deviceId:(UInt32)deviceId
                                       timestamp:(uint64_t)timestamp
                                     transaction:(SDSAnyWriteTransaction *)transaction
{
    OWSAssertDebug(transaction);

    __block TSIncomingMessage *foundMessage;
    
    NSError *error;
    NSArray<TSIncomingMessage *> *messages = (NSArray<TSIncomingMessage *> *)[InteractionFinder
        interactionsWithTimestamp:timestamp
                           filter:^(TSInteraction *interaction) {
                               return [interaction isKindOfClass:[TSIncomingMessage class]];
                           }
                      transaction:transaction
                            error:&error];
    
    [messages enumerateObjectsUsingBlock:^(TSIncomingMessage * _Nonnull message, NSUInteger idx, BOOL * _Nonnull stop) {
        NSString *messageAuthorId = message.messageAuthorId;
        OWSAssertDebug(messageAuthorId.length > 0);

        if ([messageAuthorId isEqualToString:authorId] && message.sourceDeviceId == deviceId) {
            foundMessage = message;
            *stop = YES;
        }
    }];

    return foundMessage;
}

// TODO get rid of this method and instead populate authorId in initWithCoder:
- (NSString *)messageAuthorId
{
    // authorId isn't set on all legacy messages, so we take
    // extra measures to ensure we obtain a valid value.
    NSString *messageAuthorId;
    if (self.authorId) {
        // Group Thread
        messageAuthorId = self.authorId;
    } else {
        // Contact Thread
        messageAuthorId = [TSContactThread contactIdFromThreadId:self.uniqueThreadId];
    }
    OWSAssertDebug(messageAuthorId.length > 0);
    return messageAuthorId;
}

- (OWSInteractionType)interactionType
{
    return OWSInteractionType_IncomingMessage;
}

- (BOOL)shouldStartExpireTimer
{
//    for (NSString *attachmentId in self.attachmentIds) {
//        TSAttachment *_Nullable attachment =
//            [TSAttachment fetchObjectWithUniqueID:attachmentId transaction:transaction];
//        if ([attachment isKindOfClass:[TSAttachmentPointer class]]) {
//            return NO;
//        }
//    }
    return self.hasPerConversationExpiration;
}

#pragma mark - OWSReadTracking

- (BOOL)shouldAffectUnreadCounts
{
    return !self.isReactionMessage;
}

- (void)markAsReadAtPosition:(DTReadPositionEntity *)readPosition
              sendReadReceipt:(BOOL)sendReadReceipt
                  transaction:(SDSAnyWriteTransaction *)transaction
{
    OWSAssertDebug(transaction);
    
    if (self.isReactionMessage) {
        //emoji reaction消息不发回执，默认已读状态
        _read = YES;
        return;
    }

    if (_read && readPosition.maxServerTime < self.timestampForSorting) {
        return;
    }
    
    NSTimeInterval secondsAgoRead = ((NSTimeInterval)[NSDate ows_millisecondTimeStamp] - (NSTimeInterval)readPosition.readAt) / 1000;
    OWSLogInfo(@"%@ marking uniqueId: %@  which has timestamp: %llu as read: %f seconds ago",
        self.logTag,
        self.uniqueId,
        self.timestamp,
        secondsAgoRead);

    if (sendReadReceipt) {
        TSThread *thread = [self threadWithTransaction:transaction];
        // TODO: check felix 2022-11-29
        [OWSReadReceiptManager.sharedManager messageWasReadLocally:self shouldSendReadReceipt:!(thread.isWithoutReadRecipt)];
    }
}

@end

NS_ASSUME_NONNULL_END
