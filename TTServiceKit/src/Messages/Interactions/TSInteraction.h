//
//  Copyright (c) 2018 Open Whisper Systems. All rights reserved.
//

#import "BaseModel.h"

NS_ASSUME_NONNULL_BEGIN

@class TSThread;
@class SDSAnyReadTransaction;
@class SDSAnyWriteTransaction;

typedef NS_ENUM(NSInteger, OWSInteractionType) {
    OWSInteractionType_Unknown,
    OWSInteractionType_IncomingMessage,
    OWSInteractionType_OutgoingMessage,
    OWSInteractionType_Error,
    OWSInteractionType_Info,
    OWSInteractionType_Offer,
    OWSInteractionType_UnreadIndicator,
};

NSString *NSStringFromOWSInteractionType(OWSInteractionType value);

@protocol OWSPreviewText

- (NSString *)previewTextWithTransaction:(SDSAnyReadTransaction *)transaction;

@optional
- (NSString *)previewAtPersonsInfoWithTransaction:(SDSAnyReadTransaction *)transaction;

@end

@interface TSInteraction : BaseModel

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
        associatedUniqueThreadId:(NSString *)associatedUniqueThreadId
                notifySequenceId:(uint64_t)notifySequenceId
             receivedAtTimestamp:(uint64_t)receivedAtTimestamp
                      sequenceId:(uint64_t)sequenceId
                 serverTimestamp:(uint64_t)serverTimestamp
                       timestamp:(uint64_t)timestamp
                  uniqueThreadId:(NSString *)uniqueThreadId
NS_DESIGNATED_INITIALIZER NS_SWIFT_NAME(init(grdbId:uniqueId:associatedUniqueThreadId:notifySequenceId:receivedAtTimestamp:sequenceId:serverTimestamp:timestamp:uniqueThreadId:));

// clang-format on

// --- CODE GENERATION MARKER

- (instancetype)initInteractionWithTimestamp:(uint64_t)timestamp
                             serverTimestamp:(uint64_t)serverTimestamp
                                  sequenceId:(uint64_t)sequenceId
                            notifySequenceId:(uint64_t)notifySequenceId
                                    inThread:(TSThread *)thread
                                    authorId:(NSString *)authorId
                                    deviceId:(uint32_t)deviceId;

- (instancetype)initWithUniqueId:(NSString *)uniqueId
                       timestamp:(uint64_t)timestamp
             receivedAtTimestamp:(uint64_t)receivedAtTimestamp
                        inThread:(TSThread *)thread NS_DESIGNATED_INITIALIZER;

@property (nonatomic, readonly) NSString *uniqueThreadId;
@property (nonatomic, readonly, nullable) TSThread *threadWithSneakyTransaction;

// 消息发送时间
@property (nonatomic, readonly) uint64_t timestamp;

// 服务端接收到消息时的时间戳，作为排序依据。
// 如果是 OutgoingMessage, 需要从发送消息成功的回执中获取 serverTimestamp。
// 发送失败时用 sendAt [Thread 中最近消息的 serverTimestamp+buffer] 作为占位 serverTimestamp。
@property (atomic, assign) uint64_t serverTimestamp;

// 排序 id
@property (atomic, assign) uint64_t sequenceId;
//calculate unread count
@property (atomic, assign) uint64_t notifySequenceId;
//关联的会话，如回执消息
@property (nonatomic, strong) NSString *associatedUniqueThreadId;

//@property (nonatomic, readonly) uint64_t sortId;
@property (nonatomic, readonly) uint64_t receivedAtTimestamp;

- (NSDate *)receivedAtDate;

- (OWSInteractionType)interactionType;

- (nullable TSThread *)threadWithTransaction:(SDSAnyReadTransaction *)transaction;

/**
 * When an interaction is updated, it often affects the UI for it's containing thread. Touching it's thread will notify
 * any observers so they can redraw any related UI.
 */
//- (void)touchThreadWithTransaction:(SDSAnyWriteTransaction *)transaction;

#pragma mark Utility Method

+ (NSString *)generateUniqueIdWithAuthorId:(NSString *)authorId
                                  deviceId:(uint32_t)deviceId
                                 timestamp:(uint64_t)timestamp;

- (NSDate *)dateForSorting;
- (uint64_t)timestampForSorting;
- (NSComparisonResult)compareForSorting:(TSInteraction *)other;

// "Dynamic" interactions are not messages or static events (like
// info messages, error messages, etc.).  They are interactions
// created, updated and deleted by the views.
//
// These include block offers, "add to contact" offers,
// unseen message indicators, etc.
- (BOOL)isDynamicInteraction;

//是否需要新消息的标识 default = true
- (BOOL)isNeedUnreadIndicator;
@end

NS_ASSUME_NONNULL_END
