//
//  Copyright (c) 2018 Open Whisper Systems. All rights reserved.
//

#import "OWSUserProfile.h"
#import "NSString+OWS.h"
#import <TTServiceKit/AppContext.h>
#import <TTServiceKit/SSKCryptography.h>
#import <TTServiceKit/NSNotificationCenter+OWS.h>
#import <TTServiceKit/TSAccountManager.h>
#import <TTServiceKit/NSObject+SignalYYModel.h>
#import <TTServiceKit/TTServiceKit-Swift.h>

NS_ASSUME_NONNULL_BEGIN

NSString *const kNSNotificationName_LocalProfileDidChange = @"kNSNotificationName_LocalProfileDidChange";
NSString *const kNSNotificationName_OtherUsersProfileWillChange = @"kNSNotificationName_OtherUsersProfileWillChange";
NSString *const kNSNotificationName_OtherUsersProfileDidChange = @"kNSNotificationName_OtherUsersProfileDidChange";

NSString *const kNSNotificationKey_ProfileRecipientId = @"kNSNotificationKey_ProfileRecipientId";
NSString *const kNSNotificationKey_ProfileGroupId = @"kNSNotificationKey_ProfileGroupId";

NSString *const kLocalProfileUniqueId = @"kLocalProfileUniqueId";

@interface OWSUserProfile ()

@property (atomic, nullable) SSKAES256Key *profileKey;
@property (atomic, nullable) NSString *profileName;
@property (atomic, nullable) NSString *avatarUrlPath;
@property (atomic, nullable) NSString *avatarFileName;

@end

#pragma mark -

@implementation OWSUserProfile

@synthesize avatarUrlPath = _avatarUrlPath;
@synthesize profileName = _profileName;

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
                  avatarFileName:(nullable NSString *)avatarFileName
                   avatarUrlPath:(nullable NSString *)avatarUrlPath
                      profileKey:(nullable SSKAES256Key *)profileKey
                     profileName:(nullable NSString *)profileName
                     recipientId:(NSString *)recipientId
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId];

    if (!self) {
        return self;
    }

    _avatarFileName = avatarFileName;
    _avatarUrlPath = avatarUrlPath;
    _profileKey = profileKey;
    _profileName = profileName;
    _recipientId = recipientId;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

+ (NSString *)collection
{
    // Legacy class name.
    return @"UserProfile";
}


+ (OWSUserProfile *)getUserProfileForRecipientId:(NSString *)recipientId
                                     transaction:(SDSAnyReadTransaction *)transaction
{
    OWSAssertDebug(recipientId.length > 0);
    
    OWSUserProfile *userProfile = [self.modelReadCaches.userProfileReadCache getUserProfileWithAddress:recipientId transaction:transaction];
    
    if (!userProfile) {
        return nil;
    }
    
    return userProfile;
}

+ (OWSUserProfile *)getOrBuildUserProfileForRecipientId:(NSString *)recipientId
                                            transaction:(SDSAnyWriteTransaction *)transaction
{
    OWSAssertDebug(recipientId.length > 0);
    
    OWSUserProfile *userProfile = [self getUserProfileForRecipientId:recipientId transaction:transaction];

    if (!userProfile) {
        userProfile = [[OWSUserProfile alloc] initWithRecipientId:recipientId];

        if ([recipientId isEqualToString:kLocalProfileUniqueId]) {
            [userProfile updateWithProfileKey:[SSKAES256Key generateRandomKey]
                                  transaction:transaction
                                   completion:nil];
        }
    }

    OWSAssertDebug(userProfile);

    return userProfile;
}

- (instancetype)initWithRecipientId:(NSString *)recipientId
{
    self = [super initWithUniqueId:recipientId];

    if (!self) {
        return self;
    }

    OWSAssertDebug(recipientId.length > 0);
    _recipientId = recipientId;

    return self;
}

- (nullable NSString *)avatarUrlPath
{
    @synchronized(self)
    {
        return _avatarUrlPath;
    }
}

- (void)setAvatarUrlPath:(nullable NSString *)avatarUrlPath
{
    @synchronized(self)
    {
        BOOL didChange = ![NSObject isNullableObject:_avatarUrlPath equalTo:avatarUrlPath];

        _avatarUrlPath = avatarUrlPath;

        if (didChange) {
            // If the avatarURL changed, the avatarFileName can't be valid.
            // Clear it.
            self.avatarFileName = nil;
        }
    }
}

#pragma mark - Update With... Methods

- (void)applyChanges:(void (^)(id))changeBlock
        functionName:(const char *)functionName
         transaction:(SDSAnyWriteTransaction *)transaction
          completion:(nullable OWSUserProfileCompletion)completion
{
    // self might be the latest instance, so take a "before" snapshot
    // before any changes have been made.
    

    __block BOOL didChange = YES;
    
    changeBlock(self);
    
    OWSUserProfile *_Nullable latestInstance = [[self class] getUserProfileForRecipientId:self.uniqueId transaction:transaction];
    if(latestInstance){
        [self anyUpdateWithTransaction:transaction
                                 block:^(OWSUserProfile * profile) {
            NSDictionary *beforeSnapshot = [self.dictionaryValue copy];
            NSDictionary *afterSnapshot = [profile.dictionaryValue copy];
            changeBlock(profile);
            if ([beforeSnapshot isEqual:afterSnapshot]) {
                DDLogVerbose(@"%@ Ignoring redundant update in %s: %@",
                             self.logTag,
                             functionName,
                             self.debugDescription);
                didChange = NO;
            }
        }];
    }else{
        [self anyInsertWithTransaction:transaction];
    }

    if (completion) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), completion);
    }

    if (!didChange) {
        return;
    }

    BOOL isLocalUserProfile = [self.recipientId isEqualToString:kLocalProfileUniqueId];

    dispatch_async(dispatch_get_main_queue(), ^{
        if (isLocalUserProfile) {
            // We populate an initial (empty) profile on launch of a new install, but until
            // we have a registered account, syncing will fail (and there could not be any
            // linked device to sync to at this point anyway).
            if ([TSAccountManager isRegistered]) {
                [CurrentAppContext() doMultiDeviceUpdateWithProfileKey:self.profileKey];
            }

            [[NSNotificationCenter defaultCenter] postNotificationNameAsync:kNSNotificationName_LocalProfileDidChange
                                                                     object:nil
                                                                   userInfo:nil];
        } else {
            [[NSNotificationCenter defaultCenter]
                postNotificationNameAsync:kNSNotificationName_OtherUsersProfileWillChange
                                   object:nil
                                 userInfo:@{
                                     kNSNotificationKey_ProfileRecipientId : self.recipientId,
                                 }];
            [[NSNotificationCenter defaultCenter]
                postNotificationNameAsync:kNSNotificationName_OtherUsersProfileDidChange
                                   object:nil
                                 userInfo:@{
                                     kNSNotificationKey_ProfileRecipientId : self.recipientId,
                                 }];
        }
    });
}

- (void)updateWithProfileName:(nullable NSString *)profileName
                avatarUrlPath:(nullable NSString *)avatarUrlPath
               avatarFileName:(nullable NSString *)avatarFileName
                  transaction:(SDSAnyWriteTransaction *)transaction
                   completion:(nullable OWSUserProfileCompletion)completion
{
    [self applyChanges:^(OWSUserProfile *userProfile) {
        [userProfile setProfileName:[profileName ows_stripped]];
        // Always setAvatarUrlPath: before you setAvatarFileName: since
        // setAvatarUrlPath: may clear the avatar filename.
        [userProfile setAvatarUrlPath:avatarUrlPath];
        [userProfile setAvatarFileName:avatarFileName];
    }
          functionName:__PRETTY_FUNCTION__
           transaction:transaction
            completion:completion];
}

- (void)updateWithProfileName:(nullable NSString *)profileName
                avatarUrlPath:(nullable NSString *)avatarUrlPath
                  transaction:(SDSAnyWriteTransaction *)transaction
                   completion:(nullable OWSUserProfileCompletion)completion {
    [self applyChanges:^(OWSUserProfile *userProfile) {
        [userProfile setProfileName:[profileName ows_stripped]];
        [userProfile setAvatarUrlPath:avatarUrlPath];
    } functionName:__PRETTY_FUNCTION__
           transaction:transaction
            completion:completion];
}

- (void)updateWithAvatarUrlPath:(nullable NSString *)avatarUrlPath
                 avatarFileName:(nullable NSString *)avatarFileName
                    transaction:(SDSAnyWriteTransaction *)transaction
                     completion:(nullable OWSUserProfileCompletion)completion
{
    [self applyChanges:^(OWSUserProfile *userProfile) {
        // Always setAvatarUrlPath: before you setAvatarFileName: since
        // setAvatarUrlPath: may clear the avatar filename.
        [userProfile setAvatarUrlPath:avatarUrlPath];
        [userProfile setAvatarFileName:avatarFileName];
    }
          functionName:__PRETTY_FUNCTION__
           transaction:transaction
            completion:completion];
}

- (void)updateWithAvatarFileName:(nullable NSString *)avatarFileName
                     transaction:(SDSAnyWriteTransaction *)transaction
                      completion:(nullable OWSUserProfileCompletion)completion {
    {
        [self applyChanges:^(OWSUserProfile *userProfile) {
            [userProfile setAvatarFileName:avatarFileName];
        }
              functionName:__PRETTY_FUNCTION__
               transaction:transaction
                completion:completion];
    }
}

- (void)clearWithProfileKey:(SSKAES256Key *)profileKey
                transaction:(SDSAnyWriteTransaction *)transaction
                 completion:(nullable OWSUserProfileCompletion)completion
{
    [self applyChanges:^(OWSUserProfile *userProfile) {
        [userProfile setProfileKey:profileKey];
        [userProfile setProfileName:nil];
        // Always setAvatarUrlPath: before you setAvatarFileName: since
        // setAvatarUrlPath: may clear the avatar filename.
        [userProfile setAvatarUrlPath:nil];
        [userProfile setAvatarFileName:nil];
    }
          functionName:__PRETTY_FUNCTION__
           transaction:transaction
            completion:completion];
}

- (void)updateWithProfileKey:(SSKAES256Key *)profileKey
                 transaction:(SDSAnyWriteTransaction *)transaction
                  completion:(nullable OWSUserProfileCompletion)completion
{
    OWSAssertDebug(profileKey);

    [self applyChanges:^(OWSUserProfile *userProfile) {
        [userProfile setProfileKey:profileKey];
    }
          functionName:__PRETTY_FUNCTION__
           transaction:transaction
            completion:completion];
}

// This should only be used in verbose, developer-only logs.
- (NSString *)debugDescription
{
    return [NSString stringWithFormat:@"%@ %p %@ %zd %@ %@ %@",
                     self.logTag,
                     self,
                     self.recipientId,
                     self.profileKey.keyData.length,
                     self.profileName,
                     self.avatarUrlPath,
                     self.avatarFileName];
}

- (nullable NSString *)profileName
{
    @synchronized(self)
    {
        return _profileName.filterStringForDisplay;
    }
}

- (void)setProfileName:(nullable NSString *)profileName
{
    @synchronized(self)
    {
        _profileName = profileName.filterStringForDisplay;
    }
}

#pragma mark - HOOK

- (void)anyDidInsertWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidInsertWithTransaction:transaction];

    [self.modelReadCaches.userProfileReadCache didInsertOrUpdateUserProfile:self transaction:transaction];
}

- (void)anyDidUpdateWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidUpdateWithTransaction:transaction];

    [self.modelReadCaches.userProfileReadCache didInsertOrUpdateUserProfile:self transaction:transaction];
}

- (void)anyDidRemoveWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidRemoveWithTransaction:transaction];

    [self.modelReadCaches.userProfileReadCache didRemoveUserProfile:self transaction:transaction];
}


@end

NS_ASSUME_NONNULL_END
