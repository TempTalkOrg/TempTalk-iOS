//
//  Copyright (c) 2018 Open Whisper Systems. All rights reserved.
//

#import "TSInteraction.h"
#import <SignalCoreKit/NSDate+OWS.h>
#import "TSThread.h"
#import <TTServiceKit/TTServiceKit-Swift.h>

NS_ASSUME_NONNULL_BEGIN

NSString *NSStringFromOWSInteractionType(OWSInteractionType value)
{
    switch (value) {
        case OWSInteractionType_Unknown:
            return @"OWSInteractionType_Unknown";
        case OWSInteractionType_IncomingMessage:
            return @"OWSInteractionType_IncomingMessage";
        case OWSInteractionType_OutgoingMessage:
            return @"OWSInteractionType_OutgoingMessage";
        case OWSInteractionType_Error:
            return @"OWSInteractionType_Error";
        case OWSInteractionType_Info:
            return @"OWSInteractionType_Info";
        case OWSInteractionType_Offer:
            return @"OWSInteractionType_Offer";
        case OWSInteractionType_UnreadIndicator:
            return @"OWSInteractionType_UnreadIndicator";
    }
}

@interface TSInteraction ()

@end

@implementation TSInteraction

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
        associatedUniqueThreadId:(NSString *)associatedUniqueThreadId
                notifySequenceId:(uint64_t)notifySequenceId
             receivedAtTimestamp:(uint64_t)receivedAtTimestamp
                      sequenceId:(uint64_t)sequenceId
                 serverTimestamp:(uint64_t)serverTimestamp
                       timestamp:(uint64_t)timestamp
                  uniqueThreadId:(NSString *)uniqueThreadId
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId];

    if (!self) {
        return self;
    }

    _associatedUniqueThreadId = associatedUniqueThreadId;
    _notifySequenceId = notifySequenceId;
    _receivedAtTimestamp = receivedAtTimestamp;
    _sequenceId = sequenceId;
    _serverTimestamp = serverTimestamp;
    _timestamp = timestamp;
    _uniqueThreadId = uniqueThreadId;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

+ (NSString *)generateUniqueIdWithAuthorId:(NSString *)authorId
                                  deviceId:(uint32_t)deviceId
                                 timestamp:(uint64_t)timestamp{
    return [NSString stringWithFormat: @"%@_%u_%llu", authorId, deviceId, timestamp];;
}

+ (NSString *)collection {
    return @"TSInteraction";
}

- (instancetype)initInteractionWithTimestamp:(uint64_t)timestamp
                             serverTimestamp:(uint64_t)serverTimestamp
                                  sequenceId:(uint64_t)sequenceId
                            notifySequenceId:(uint64_t)notifySequenceId
                                    inThread:(TSThread *)thread
                                    authorId:(NSString *)authorId
                                    deviceId:(uint32_t)deviceId
{
    OWSAssertDebug(timestamp > 0);

    // Ensure the unique ID will be the same for the same message sent or received
    NSString *uniqueId = [TSInteraction generateUniqueIdWithAuthorId:authorId deviceId:deviceId timestamp:timestamp];
    self = [super initWithUniqueId:uniqueId];

    if (!self) {
        return self;
    }

    _timestamp = timestamp;
    _serverTimestamp = serverTimestamp;
    _sequenceId = sequenceId;
    _notifySequenceId = notifySequenceId;
    _uniqueThreadId = thread.uniqueId;
    _receivedAtTimestamp = [NSDate ows_millisecondTimeStamp];

    return self;
}

- (BOOL)isNeedUnreadIndicator {
    return true;
}

- (instancetype)initWithUniqueId:(NSString *)uniqueId
                       timestamp:(uint64_t)timestamp
             receivedAtTimestamp:(uint64_t)receivedAtTimestamp
                        inThread:(TSThread *)thread
{
    OWSAssertDebug(timestamp > 0);
    OWSAssertDebug(thread);
    
    self = [super initWithUniqueId:uniqueId];
    
    if (!self) {
        return self;
    }
    
    _timestamp = timestamp;
    _receivedAtTimestamp = receivedAtTimestamp;
    _uniqueThreadId = thread.uniqueId;
    
    return self;
}

- (nullable instancetype)initWithCoder:(NSCoder *)coder
{
    self = [super initWithCoder:coder];
    if (!self) {
        return nil;
    }
    
    // Previously the receivedAtTimestamp field lived on TSMessage, but we've moved it up
    // to the TSInteraction superclass.
    if (_receivedAtTimestamp == 0) {
        // Upgrade from the older "TSMessage.receivedAtDate" and "TSMessage.receivedAt" properties if
        // necessary.
        NSDate *receivedAtDate = [coder decodeObjectForKey:@"receivedAtDate"];
        if (!receivedAtDate) {
            receivedAtDate = [coder decodeObjectForKey:@"receivedAt"];
        }
        
        if (receivedAtDate) {
            _receivedAtTimestamp = [NSDate ows_millisecondsSince1970ForDate:receivedAtDate];
        }
        
        // For TSInteractions which are not TSMessage's, the timestamp *is* the receivedAtTimestamp
        if (_receivedAtTimestamp == 0) {
            _receivedAtTimestamp = _timestamp;
        }
    }
    
    return self;
}

#pragma mark Thread

- (nullable TSThread *)threadWithSneakyTransaction
{
    if (self.uniqueThreadId == nil) {
        return nil;
    }

    __block TSThread *_Nullable thread;
    [self.databaseStorage readWithBlock:^(SDSAnyReadTransaction *transaction) {
        thread = [TSThread anyFetchWithUniqueId:self.uniqueThreadId transaction:transaction];
        OWSAssertDebug(thread);
    }];
    return thread;
}

- (nullable TSThread *)threadWithTransaction:(SDSAnyReadTransaction *)transaction
{
    if (!DTParamsUtils.validateString(self.uniqueThreadId)) {
        // This might be a true for a few legacy interactions enqueued in
        // the message sender.  The message sender will handle this case.
        // Note that this method is not declared as nullable.
        OWSLogWarn(@"Missing uniqueThreadId:%@.", self.uniqueThreadId);
        return nil;
    }

    return [TSThread anyFetchWithUniqueId:self.uniqueThreadId transaction:transaction];
}

#pragma mark Date operations

- (uint64_t)millisecondsTimestamp {
    return self.timestamp;
}

- (NSDate *)dateForSorting
{
    return [NSDate ows_dateWithMillisecondsSince1970:self.timestampForSorting];
}

- (NSDate *)receivedAtDate
{
    return [NSDate ows_dateWithMillisecondsSince1970:self.receivedAtTimestamp];
}

- (uint64_t)timestampForSorting
{
    return self.serverTimestamp ? self.serverTimestamp : self.timestamp;
}

- (NSComparisonResult)compareForSorting:(TSInteraction *)other
{
    OWSAssertDebug(other);

    uint64_t timestamp1 = self.timestampForSorting;
    uint64_t timestamp2 = other.timestampForSorting;

    if (timestamp1 > timestamp2) {
        return NSOrderedDescending;
    } else if (timestamp1 < timestamp2) {
        return NSOrderedAscending;
    } else {
        return NSOrderedSame;
    }
}

- (OWSInteractionType)interactionType
{
    OWSFailDebug(@"%@ unknown interaction type.", self.logTag);

    return OWSInteractionType_Unknown;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ in thread: %@ timestamp: %lu",
                     [super description],
                     self.uniqueThreadId,
                     (unsigned long)self.timestamp];
}


- (BOOL)isDynamicInteraction
{
    return NO;
}

//- (void)updateThreadWithTransaction:(SDSAnyWriteTransaction *)transaction{
//    TSThread *fetchedThread = [self threadWithTransaction:transaction];
//    [fetchedThread updateWithLastMessage:self transaction:transaction];
//}

#pragma mark - Any Transaction Hooks

- (void)anyWillInsertWithTransaction:(SDSAnyWriteTransaction *)transaction{
    [super anyWillInsertWithTransaction:transaction];
}

- (void)anyWillUpdateWithTransaction:(SDSAnyWriteTransaction *)transaction{
    [super anyWillUpdateWithTransaction:transaction];
}

- (void)anyDidInsertWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidInsertWithTransaction:transaction];

//    [self updateThreadWithTransaction:transaction];
    TSThread *fetchedThread = [self threadWithTransaction:transaction];
    [fetchedThread updateWithInsertedMessage:self transaction:transaction];

    // Don't update interactionReadCache; this instance's sortId isn't
    // populated yet.
}

- (void)anyWillRemoveWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [SDSDatabaseStorage.shared updateIdMappingWithInteraction:self transaction:transaction];

    [super anyWillRemoveWithTransaction:transaction];
}

- (void)anyDidUpdateWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidUpdateWithTransaction:transaction];

//    [self updateThreadWithTransaction:transaction];
    TSThread *fetchedThread = [self threadWithTransaction:transaction];
    [fetchedThread updateWithUpdatedMessage:self transaction:transaction];

    if(self.grdbId){
        [self.modelReadCaches.interactionReadCache didUpdateInteraction:self transaction:transaction];
    }else{
        OWSFailDebug(@"grdbId should not be null!");
    }
}

- (void)anyDidRemoveWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidRemoveWithTransaction:transaction];

    if (![transaction shouldIgnoreInteractionUpdatesForThreadUniqueId:self.uniqueThreadId]) {
        
        TSThread *fetchedThread = [self threadWithTransaction:transaction];
        [fetchedThread updateWithRemovedMessage:self transaction:transaction];
    }

//    [MessageSendLog deleteAllPayloadsForInteraction:self transaction:transaction];
    [self.modelReadCaches.interactionReadCache didRemoveInteraction:self transaction:transaction];
}

+ (TSFTSIndexMode)FTSIndexMode
{
    return TSFTSIndexModeAlways;
}

@end

NS_ASSUME_NONNULL_END
