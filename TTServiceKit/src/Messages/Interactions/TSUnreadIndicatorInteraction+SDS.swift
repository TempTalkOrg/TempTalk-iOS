//
//  Copyright (c) 2022 Open Whisper Systems. All rights reserved.
//

import Foundation
import GRDB
import SignalCoreKit

// NOTE: This file is generated by /Scripts/sds_codegen/sds_generate.py.
// Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// MARK: - Typed Convenience Methods

@objc
public extension TSUnreadIndicatorInteraction {
    // NOTE: This method will fail if the object has unexpected type.
    class func anyFetchUnreadIndicatorInteraction(
        uniqueId: String,
        transaction: SDSAnyReadTransaction
    ) -> TSUnreadIndicatorInteraction? {
        assert(uniqueId.count > 0)

        guard let object = anyFetch(uniqueId: uniqueId,
                                    transaction: transaction) else {
                                        return nil
        }
        guard let instance = object as? TSUnreadIndicatorInteraction else {
            owsFailDebug("Object has unexpected type: \(type(of: object))")
            return nil
        }
        return instance
    }

    // NOTE: This method will fail if the object has unexpected type.
    func anyUpdateUnreadIndicatorInteraction(transaction: SDSAnyWriteTransaction, block: (TSUnreadIndicatorInteraction) -> Void) {
        anyUpdate(transaction: transaction) { (object) in
            guard let instance = object as? TSUnreadIndicatorInteraction else {
                owsFailDebug("Object has unexpected type: \(type(of: object))")
                return
            }
            block(instance)
        }
    }
}

// MARK: - SDSSerializer

// The SDSSerializer protocol specifies how to insert and update the
// row that corresponds to this model.
class TSUnreadIndicatorInteractionSerializer: SDSSerializer {

    private let model: TSUnreadIndicatorInteraction
    public required init(model: TSUnreadIndicatorInteraction) {
        self.model = model
    }

    // MARK: - Record

    func asRecord() throws -> SDSRecord {
        let id: Int64? = model.grdbId?.int64Value

        let recordType: SDSRecordType = .unreadIndicatorInteraction
        let uniqueId: String = model.uniqueId

        // Properties
        let associatedUniqueThreadId: String = model.associatedUniqueThreadId
        let atPersons: String? = nil
        let attachmentIds: Data? = nil
        let authorId: String? = nil
        let body: String? = nil
        let card: Data? = nil
        let combinedForwardingMessage: Data? = nil
        let contactShare: Data? = nil
        let customAttributedMessage: Data? = nil
        let customMessage: String? = nil
        let editable: Bool? = nil
        let errorType: TSErrorMessageType? = nil
        let expireStartedAt: UInt64? = nil
        let expiresAt: UInt64? = nil
        let expiresInSeconds: UInt32? = nil
        let groupChatMode: TSGroupChatMode? = nil
        let groupMetaMessage: TSGroupMetaMessage? = nil
        let hasSyncedTranscript: Bool? = nil
        let inviteCode: String? = nil
        let isFromLinkedDevice: Bool? = nil
        let isPinnedMessage: Bool? = nil
        let isVoiceMessage: Bool? = nil
        let meetingDetailUrl: String? = nil
        let meetingName: String? = nil
        let meetingReminderType: DTMeetingReminderType? = nil
        let messageType: TSInfoMessageType? = nil
        let mostRecentFailureText: String? = nil
        let notifySequenceId: UInt64 = model.notifySequenceId
        let pinId: String? = nil
        let quotedMessage: Data? = nil
        let rapidFiles: Data? = nil
        let reactionMap: Data? = nil
        let reactionMessage: Data? = nil
        let read: Bool? = nil
        let realSource: Data? = nil
        let recall: Data? = nil
        let recallPreview: String? = nil
        let receivedAtTimestamp: UInt64 = model.receivedAtTimestamp
        let recipientId: String? = nil
        let recipientStateMap: Data? = nil
        let sequenceId: UInt64 = model.sequenceId
        let serverTimestamp: UInt64 = model.serverTimestamp
        let sourceDeviceId: UInt32? = nil
        let timestamp: UInt64 = model.timestamp
        let translateMessage: Data? = nil
        let threadUniqueId: String = model.uniqueThreadId
        let unregisteredRecipientId: String? = nil
        let whisperMessageType: TSWhisperMessageType? = nil
        let storedShouldStartExpireTimer: Bool? = nil
        let mentionedMsgType: OWSMentionedMsgType? = nil
        let configurationDurationSeconds: UInt32? = nil
        let shouldAffectThreadSorting: Bool? = nil
        let mentions: Data? = nil
        let storedMessageState: TSOutgoingMessageState? = nil
        let envelopSource: String? = nil
        let cardUniqueId: String? = nil
        let cardVersion: UInt32? = nil
        let messageModeType: TSMessageModeType? = nil

        return InteractionRecord(delegate: model, id: id, recordType: recordType, uniqueId: uniqueId, associatedUniqueThreadId: associatedUniqueThreadId, atPersons: atPersons, attachmentIds: attachmentIds, authorId: authorId, body: body, card: card, combinedForwardingMessage: combinedForwardingMessage, contactShare: contactShare, customAttributedMessage: customAttributedMessage, customMessage: customMessage, editable: editable, errorType: errorType, expireStartedAt: expireStartedAt, expiresAt: expiresAt, expiresInSeconds: expiresInSeconds, groupChatMode: groupChatMode, groupMetaMessage: groupMetaMessage, hasSyncedTranscript: hasSyncedTranscript, inviteCode: inviteCode, isFromLinkedDevice: isFromLinkedDevice, isPinnedMessage: isPinnedMessage, isVoiceMessage: isVoiceMessage, meetingDetailUrl: meetingDetailUrl, meetingName: meetingName, meetingReminderType: meetingReminderType, messageType: messageType, mostRecentFailureText: mostRecentFailureText, notifySequenceId: notifySequenceId, pinId: pinId, quotedMessage: quotedMessage, rapidFiles: rapidFiles, reactionMap: reactionMap, reactionMessage: reactionMessage, read: read, realSource: realSource, recall: recall, recallPreview: recallPreview, receivedAtTimestamp: receivedAtTimestamp, recipientId: recipientId, recipientStateMap: recipientStateMap, sequenceId: sequenceId, serverTimestamp: serverTimestamp, sourceDeviceId: sourceDeviceId, timestamp: timestamp, translateMessage: translateMessage, threadUniqueId: threadUniqueId, unregisteredRecipientId: unregisteredRecipientId, whisperMessageType: whisperMessageType, storedShouldStartExpireTimer: storedShouldStartExpireTimer, mentionedMsgType: mentionedMsgType, configurationDurationSeconds: configurationDurationSeconds, shouldAffectThreadSorting: shouldAffectThreadSorting, mentions: mentions, storedMessageState: storedMessageState, envelopSource: envelopSource, cardUniqueId: cardUniqueId, cardVersion: cardVersion, messageModeType: messageModeType)
    }
}
                                                        
