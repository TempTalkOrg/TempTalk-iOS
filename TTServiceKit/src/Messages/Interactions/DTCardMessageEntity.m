//
//  DTCardMessageEntity.m
//  TTServiceKit
//
//  Created by Kris.s on 2022/5/18.
//

#import "DTCardMessageEntity.h"
#import "DTParamsBaseUtils.h"
#import <TTServiceKit/TTServiceKit-Swift.h>

@implementation DTCardMessageEntity

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
                           appId:(NSString *)appId
                          cardId:(NSString *)cardId
                         content:(NSString *)content
                     contentType:(unsigned int)contentType
                         creator:(nullable NSString *)creator
                      fixedWidth:(BOOL)fixedWidth
                       timestamp:(uint64_t)timestamp
                         version:(unsigned int)version
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId];

    if (!self) {
        return self;
    }

    _appId = appId;
    _cardId = cardId;
    _content = content;
    _contentType = contentType;
    _creator = creator;
    _fixedWidth = fixedWidth;
    _timestamp = timestamp;
    _version = version;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

+ (NSDictionary *)JSONKeyPathsByPropertyKey{
    NSMutableDictionary *map = [NSDictionary mtl_identityPropertyMapWithModel:[self class]].mutableCopy;
    map[@"cardType"] = @"type";
    return map.copy;
}

+ (DTCardMessageEntity *)cardEntityWithProto:(DSKProtoCard *)cardProto{
    if(!cardProto ||
       !DTParamsUtils.validateString(cardProto.content)){
        OWSProdError(@"card content is empty.")
        return nil;
    }
    
    DTCardMessageEntity *cardEntity = [[DTCardMessageEntity alloc] init];
    cardEntity.appId = cardProto.appID;
    cardEntity.content = cardProto.content;
    
    cardEntity.cardId = cardProto.cardID;
    cardEntity.version = cardProto.version;
    cardEntity.creator = cardProto.creator;
    cardEntity.timestamp = cardProto.timestamp;
    cardEntity.contentType = cardProto.contentType;
    cardEntity.cardType = cardProto.type;
    cardEntity.fixedWidth = cardProto.fixedWidth;
    
    return cardEntity;
}

+ (nullable DSKProtoCard *)cardProtoWithEntity:(DTCardMessageEntity *)cardEntity{
    if(!cardEntity ||
       !DTParamsUtils.validateString(cardEntity.content)){
        return nil;
    }
    
    DSKProtoCardBuilder *builder = [DSKProtoCard builder];
    
    if (cardEntity.appId) {
        [builder setAppID:cardEntity.appId];
    }
    if (cardEntity.cardId) {
        [builder setCardID:cardEntity.cardId];
    }
    
    builder.content = cardEntity.content;
    builder.version = cardEntity.version;
    builder.creator = cardEntity.creator;
    builder.timestamp = cardEntity.timestamp;
    builder.contentType = cardEntity.contentType;
    builder.type = cardEntity.cardType;
    builder.fixedWidth = cardEntity.fixedWidth;
    
    return [builder buildAndReturnError:nil];
}

- (NSString *)generateUniqueIdWithSource:(NSString *)source conversationId:(NSString *)conversationId {
    if(DTParamsUtils.validateString(self.cardId) &&
       DTParamsUtils.validateString(source) &&
       DTParamsUtils.validateString(conversationId)){
        self.uniqueId = [NSString stringWithFormat:@"%@_%@_%@", self.cardId, source, conversationId];
        return self.uniqueId;
    }
    return @"";
}

- (void)updateDataWithCardUniqueId:(NSString *)cardUniqueId
                  receivedCardType:(DTReceivedCardType)receivedCardType
                       transaction:(SDSAnyWriteTransaction *)transaction
                      updateAction:(nullable void(^)(void))updateAction {
    
    if(DTParamsUtils.validateString(cardUniqueId)){
        DTCardMessageEntity *latestCard = [DTCardMessageEntity anyFetchWithUniqueId:cardUniqueId
                                                                        transaction:transaction];
        if(latestCard){
            if (self.version > latestCard.version) {
                [self anyOverwritingUpdateWithTransaction:transaction];
                if(updateAction){
                    updateAction();
                }
            } else {
                DDLogInfo(@"received %ld card message: Ignore lower version card!", receivedCardType);
            }
        } else {
            [self anyInsertWithTransaction:transaction];
        }
    } else {
        DDLogError(@"received %ld card message: cardUniqueId == nil!", receivedCardType);
    }
}

@end
