//
//  Copyright (c) 2018 Open Whisper Systems. All rights reserved.
//

#import "TSInfoMessage.h"
#import "ContactsManagerProtocol.h"
#import <SignalCoreKit/NSDate+OWS.h>
#import "TextSecureKitEnv.h"
#import "DTGroupUtils.h"
#import <TTServiceKit/TTServiceKit-Swift.h>
#import <TTServiceKit/OWSRecall.h>
#import "OWSDevice.h"

NS_ASSUME_NONNULL_BEGIN

NSUInteger TSInfoMessageSchemaVersion = 1;

const InfoMessageUserInfoKey InfoMessageUserInfoKeyUpdateMessages = @"InfoMessageUserInfoKeyUpdateMessages";
const InfoMessageUserInfoKey InfoMessageUserInfoKeyOldGroupModel = @"InfoMessageUserInfoKeyOldGroupModel";
const InfoMessageUserInfoKey InfoMessageUserInfoKeyNewGroupModel = @"InfoMessageUserInfoKeyNewGroupModel";
const InfoMessageUserInfoKey InfoMessageUserInfoKeyOldDisappearingMessageToken
    = @"InfoMessageUserInfoKeyOldDisappearingMessageToken";
const InfoMessageUserInfoKey InfoMessageUserInfoKeyNewDisappearingMessageToken
    = @"InfoMessageUserInfoKeyNewDisappearingMessageToken";
const InfoMessageUserInfoKey InfoMessageUserInfoKeyGroupUpdateSourceAddress
    = @"InfoMessageUserInfoKeyGroupUpdateSourceAddress";
const InfoMessageUserInfoKey InfoMessageUserInfoKeyProfileChanges = @"InfoMessageUserInfoKeyProfileChanges";
const InfoMessageUserInfoKey InfoMessageUserInfoKeyChangePhoneNumberUuid
    = @"InfoMessageUserInfoKeyChangePhoneNumberUuid";
const InfoMessageUserInfoKey InfoMessageUserInfoKeyChangePhoneNumberOld = @"InfoMessageUserInfoKeyChangePhoneNumberOld";
const InfoMessageUserInfoKey InfoMessageUserInfoKeyChangePhoneNumberNew = @"InfoMessageUserInfoKeyChangePhoneNumberNew";

@interface TSInfoMessage ()

@property (nonatomic, getter=wasRead) BOOL read;

@property (nonatomic, readonly) NSUInteger infoMessageSchemaVersion;

@end

#pragma mark -

@implementation TSInfoMessage

- (instancetype)initWithCoder:(NSCoder *)coder
{
    self = [super initWithCoder:coder];
    if (!self) {
        return self;
    }

    if (self.infoMessageSchemaVersion < 1) {
        _read = YES;
    }

    _infoMessageSchemaVersion = TSInfoMessageSchemaVersion;

    if (self.isDynamicInteraction) {
        self.read = YES;
    }

    return self;
}

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
        associatedUniqueThreadId:(NSString *)associatedUniqueThreadId
                notifySequenceId:(uint64_t)notifySequenceId
             receivedAtTimestamp:(uint64_t)receivedAtTimestamp
                      sequenceId:(uint64_t)sequenceId
                 serverTimestamp:(uint64_t)serverTimestamp
                       timestamp:(uint64_t)timestamp
                  uniqueThreadId:(NSString *)uniqueThreadId
                       atPersons:(nullable NSString *)atPersons
                   attachmentIds:(NSArray<NSString *> *)attachmentIds
                            body:(nullable NSString *)body
                            card:(nullable DTCardMessageEntity *)card
                    cardUniqueId:(nullable NSString *)cardUniqueId
                     cardVersion:(unsigned int)cardVersion
       combinedForwardingMessage:(nullable DTCombinedForwardingMessage *)combinedForwardingMessage
                    contactShare:(nullable OWSContact *)contactShare
                        editable:(BOOL)editable
                   envelopSource:(nullable NSString *)envelopSource
                 expireStartedAt:(uint64_t)expireStartedAt
                       expiresAt:(uint64_t)expiresAt
                expiresInSeconds:(unsigned int)expiresInSeconds
                 isPinnedMessage:(BOOL)isPinnedMessage
                        mentions:(nullable NSArray<DTMention *> *)mentions
                 messageModeType:(TSMessageModeType)messageModeType
                           pinId:(nullable NSString *)pinId
                   quotedMessage:(nullable TSQuotedMessage *)quotedMessage
                     reactionMap:(nullable NSDictionary<NSString *,NSArray<DTReactionSource *> *> *)reactionMap
                 reactionMessage:(nullable DTReactionMessage *)reactionMessage
                          recall:(nullable DTRecallMessage *)recall
    storedShouldStartExpireTimer:(BOOL)storedShouldStartExpireTimer
                translateMessage:(nullable DTTranslateMessage *)translateMessage
              whisperMessageType:(TSWhisperMessageType)whisperMessageType
                        authorId:(NSString *)authorId
         customAttributedMessage:(nullable NSAttributedString *)customAttributedMessage
                   customMessage:(nullable NSString *)customMessage
                      inviteCode:(NSString *)inviteCode
                meetingDetailUrl:(nullable NSString *)meetingDetailUrl
                     meetingName:(nullable NSString *)meetingName
             meetingReminderType:(DTMeetingReminderType)meetingReminderType
                     messageType:(TSInfoMessageType)messageType
                            read:(BOOL)read
                      realSource:(nullable DTRealSourceEntity *)realSource
                   recallPreview:(NSString *)recallPreview
       shouldAffectThreadSorting:(BOOL)shouldAffectThreadSorting
                  sourceDeviceId:(unsigned int)sourceDeviceId
         unregisteredRecipientId:(nullable NSString *)unregisteredRecipientId
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId
          associatedUniqueThreadId:associatedUniqueThreadId
                  notifySequenceId:notifySequenceId
               receivedAtTimestamp:receivedAtTimestamp
                        sequenceId:sequenceId
                   serverTimestamp:serverTimestamp
                         timestamp:timestamp
                    uniqueThreadId:uniqueThreadId
                         atPersons:atPersons
                     attachmentIds:attachmentIds
                              body:body
                              card:card
                      cardUniqueId:cardUniqueId
                       cardVersion:cardVersion
         combinedForwardingMessage:combinedForwardingMessage
                      contactShare:contactShare
                          editable:editable
                     envelopSource:envelopSource
                   expireStartedAt:expireStartedAt
                         expiresAt:expiresAt
                  expiresInSeconds:expiresInSeconds
                   isPinnedMessage:isPinnedMessage
                          mentions:mentions
                   messageModeType:messageModeType
                             pinId:pinId
                     quotedMessage:quotedMessage
                       reactionMap:reactionMap
                   reactionMessage:reactionMessage
                            recall:recall
      storedShouldStartExpireTimer:storedShouldStartExpireTimer
                  translateMessage:translateMessage
                whisperMessageType:whisperMessageType];

    if (!self) {
        return self;
    }

    _authorId = authorId;
    _customAttributedMessage = customAttributedMessage;
    _customMessage = customMessage;
    _inviteCode = inviteCode;
    _meetingDetailUrl = meetingDetailUrl;
    _meetingName = meetingName;
    _meetingReminderType = meetingReminderType;
    _messageType = messageType;
    _read = read;
    _realSource = realSource;
    _recallPreview = recallPreview;
    _shouldAffectThreadSorting = shouldAffectThreadSorting;
    _sourceDeviceId = sourceDeviceId;
    _unregisteredRecipientId = unregisteredRecipientId;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

- (instancetype)initWithTimestamp:(uint64_t)timestamp
                         inThread:(TSThread *)thread
                      messageType:(TSInfoMessageType)messageType
{
    return [self initWithTimestamp:timestamp inThread:thread messageType:messageType expiresInSeconds:0 customMessage:nil];
}

- (instancetype)initWithTimestamp:(uint64_t)timestamp
                         inThread:(TSThread *)thread
                      messageType:(TSInfoMessageType)messageType
                 expiresInSeconds:(uint32_t)expiresInSeconds
                    customMessage:(NSString * _Nullable)customMessage
{
    self = [super initMessageWithTimestamp:timestamp
                           serverTimestamp:timestamp
                                sequenceId:0
                          notifySequenceId:0
                                  inThread:thread
                                  authorId:[TSAccountManager localNumber]
                                  deviceId:[OWSDevice currentDeviceId]
                               messageBody:nil
                                 atPersons:nil
                                  mentions:nil
                             attachmentIds:@[]
                          expiresInSeconds:expiresInSeconds
                           expireStartedAt:0
                             quotedMessage:nil
                         forwardingMessage:nil
                              contactShare:nil];

    if (!self) {
        return self;
    }

    _messageType = messageType;
    _customMessage = customMessage;
    _infoMessageSchemaVersion = TSInfoMessageSchemaVersion;

    if (self.isDynamicInteraction) {
        self.read = YES;
    }

    return self;
}

- (instancetype)initWithTimestamp:(uint64_t)timestamp
                         inThread:(TSThread *)thread
                      messageType:(TSInfoMessageType)messageType
                    customMessage:(NSString *)customMessage
{
    self = [self initWithTimestamp:timestamp inThread:thread messageType:messageType];
    if (self) {
        _customMessage = customMessage;
    }
    return self;
}

- (instancetype)initWithTimestamp:(uint64_t)timestamp
                  serverTimestamp:(uint64_t)serverTimestamp
                         inThread:(TSThread *)thread
                 expiresInSeconds:(uint32_t)expiresInSeconds
                    customMessage:(NSAttributedString *)customMessage{
    
    self = [super initMessageWithTimestamp:timestamp
                           serverTimestamp:serverTimestamp
                                sequenceId:0
                          notifySequenceId:0
                                  inThread:thread
                                  authorId:[TSAccountManager localNumber]
                                  deviceId:[OWSDevice currentDeviceId]
                               messageBody:nil
                                 atPersons:nil
                                  mentions:nil
                             attachmentIds:@[]
                          expiresInSeconds:expiresInSeconds
                           expireStartedAt:0
                             quotedMessage:nil
                         forwardingMessage:nil
                              contactShare:nil];
    
    if (!self) {
        return self;
    }
    
    _customAttributedMessage = customMessage;
    _messageType = TSInfoMessageRecallMessage;
    _infoMessageSchemaVersion = TSInfoMessageSchemaVersion;
    self.read = YES;
    
    return self;
}

- (instancetype)initWithTimestamp:(uint64_t)timestamp
                  serverTimestamp:(uint64_t)serverTimestamp
                         inThread:(TSThread *)thread
                         authorId:(NSString *)authorId
                         deviceId:(UInt32)deviceId
                 expiresInSeconds:(uint32_t)expiresInSeconds
                    customMessage:(NSAttributedString *)customMessage {
    
    self = [super initMessageWithTimestamp:timestamp
                           serverTimestamp:serverTimestamp
                                sequenceId:0
                          notifySequenceId:0
                                  inThread:thread
                                  authorId:authorId
                                  deviceId:deviceId
                               messageBody:nil
                                 atPersons:nil
                                  mentions:nil
                             attachmentIds:@[]
                          expiresInSeconds:expiresInSeconds
                           expireStartedAt:0
                             quotedMessage:nil
                         forwardingMessage:nil
                              contactShare:nil];
    
    if (!self) {
        return self;
    }
    
    _customAttributedMessage = customMessage;
    _messageType = TSInfoMessageRecallMessage;
    _infoMessageSchemaVersion = TSInfoMessageSchemaVersion;
    self.read = YES;
    
    return self;
}

- (instancetype)initActionInfoMessageWithType:(TSInfoMessageType)messageType
                                    timestamp:(uint64_t)timestamp
                              serverTimestamp:(uint64_t)serverTimestamp
                                     inThread:(TSThread *)thread
                                customMessage:(NSAttributedString *)customMessage {
    
    self = [self initWithTimestamp:timestamp
                   serverTimestamp:serverTimestamp
                          inThread:thread
                  expiresInSeconds:0
                     customMessage:customMessage];
    
    _messageType = messageType;
    
    return self;
}

- (instancetype)initActionInfoMessageWithType:(TSInfoMessageType)messageType
                                    timestamp:(uint64_t)timestamp
                              serverTimestamp:(uint64_t)serverTimestamp
                                     inThread:(TSThread *)thread
                                customMessage:(NSString *)customMessage
                      customAttributedMessage:(NSAttributedString *)customAttributedMessage {
    
    self = [self initWithTimestamp:timestamp
                   serverTimestamp:serverTimestamp
                          inThread:thread
                  expiresInSeconds:0
                     customMessage:customAttributedMessage];
    
    _messageType = messageType;
    _customMessage = customMessage;
    
    return self;
}

- (instancetype)initMeetingInfoMessageWithType:(TSInfoMessageType)messageType
                                     timestamp:(uint64_t)timestamp
                               serverTimestamp:(uint64_t)serverTimestamp
                           meetingReminderType:(DTMeetingReminderType)meetingReminderType
                              meetingDetailUrl:(NSString *)meetingDetailUrl
                                   meetingName:(NSString *)meetingName
//                                     meetingId:(NSString *)meetingId
                                      inThread:(TSThread *)thread
                                 customMessage:(NSAttributedString *)customMessage {
    self = [self initWithTimestamp:timestamp
                   serverTimestamp:serverTimestamp
                          inThread:thread
                  expiresInSeconds:0
                     customMessage:customMessage];
    
    _messageType = messageType;
    _meetingReminderType = meetingReminderType;
    _meetingName = meetingName;
//    _meetingId = meetingId;
    _meetingDetailUrl = meetingDetailUrl;
    
    return self;
}

- (instancetype)initWithTimestamp:(uint64_t)timestamp
                         inThread:(TSThread *)thread
                      messageType:(TSInfoMessageType)messageType
          unregisteredRecipientId:(NSString *)unregisteredRecipientId
{
    self = [self initWithTimestamp:timestamp inThread:thread messageType:messageType];
    if (self) {
        _unregisteredRecipientId = unregisteredRecipientId;
    }
    return self;
}

+ (instancetype)userNotRegisteredMessageInThread:(TSThread *)thread recipientId:(NSString *)recipientId
{
    OWSAssertDebug(thread);
    OWSAssertDebug(recipientId);

    return [[self alloc] initWithTimestamp:[NSDate ows_millisecondTimeStamp]
                                  inThread:thread
                               messageType:TSInfoMessageUserNotRegistered
                   unregisteredRecipientId:recipientId];
}

+ (instancetype)userPermissionWasForbiddenedMessageInThread:(TSThread *)thread recipientId:(NSString *)recipientId
{
    OWSAssertDebug(thread);
    OWSAssertDebug(recipientId);

    return [[self alloc] initWithTimestamp:[NSDate ows_millisecondTimeStamp]
                                  inThread:thread
                               messageType:TSInfoMessageUserPermissionForbidden
                   unregisteredRecipientId:recipientId];
}


- (OWSInteractionType)interactionType
{
    return OWSInteractionType_Info;
}

- (NSString *)systemMessageTextWithTransaction:(SDSAnyReadTransaction *)transaction
{
//    switch (self.messageType) {
//        case TSInfoMessageSyncedThread:
//            return Localized(@"INFO_MESSAGE_SYNCED_THREAD",
//                                     @"Shown in inbox and conversation after syncing as a placeholder indicating why your message history "
//                                     @"is missing.");
//        default:
            return [self previewTextWithTransaction:transaction];
//    }
}

- (NSString *)previewTextWithTransaction:(SDSAnyReadTransaction *)transaction
{
    switch (_messageType) {
        case TSInfoMessageTypeSessionDidEnd:
            return Localized(@"SECURE_SESSION_RESET", nil);
        case TSInfoMessageTypeUnsupportedMessage:
            return Localized(@"UNSUPPORTED_ATTACHMENT", nil);
        case TSInfoMessageUserNotRegistered:
                return Localized(@"CONTACT_DETAIL_COMM_TYPE_INSECURE", nil);
        case TSInfoMessageUserUnLogined:
                return Localized(@"CONTACT_DETAIL_COMM_TYPE_UNLOGIN", nil);
        case TSInfoMessageUserAccountCanceled:
                return Localized(@"SEND_MESSAGE_FAILED_REASON", nil);
        case TSInfoMessageUserPermissionForbidden: {
            NSString *preview = self.customAttributedMessage.string;
            BOOL isPreviewAvailable = preview && preview.length > 0;
            return isPreviewAvailable ? preview : [self defaultPermissionForbiddenInfo];
        }
        case TSInfoMessageTypeGroupQuit:
            return Localized(@"GROUP_YOU_LEFT", nil);
        case TSInfoMessageTypeGroupUpdate:
            return _customMessage != nil ? _customMessage : Localized(@"GROUP_UPDATED", nil);
        case TSInfoMessageAddToContactsOffer:
            return Localized(@"ADD_TO_CONTACTS_OFFER",
                @"Message shown in conversation view that offers to add an unknown user to your phone's contacts.");
        case TSInfoMessageVerificationStateChange:
            return Localized(@"VERIFICATION_STATE_CHANGE_GENERIC",
                @"Generic message indicating that verification state changed for a given user.");
        case TSInfoMessageAddUserToProfileWhitelistOffer:
            return Localized(@"ADD_USER_TO_PROFILE_WHITELIST_OFFER",
                @"Message shown in conversation view that offers to share your profile with a user.");
        case TSInfoMessageAddGroupToProfileWhitelistOffer:
            return Localized(@"ADD_GROUP_TO_PROFILE_WHITELIST_OFFER",
                @"Message shown in conversation view that offers to share your profile with a group.");
        case TSInfoMessageRecallMessage:
        {
            NSString *contentString = Localized(@"RECALL_MESSAGE_PREVIEW",nil);
            if(self.recallPreview.length){
                contentString = self.recallPreview;
            }
            return contentString;
        }
        case TSInfoMessagePinMessage: {
            NSString *preview = self.customAttributedMessage.string;
            BOOL isPreviewAvailable = preview && preview.length > 0;
            return isPreviewAvailable ? preview : Localized(@"PINNED_INFO_MESSAGE_DEFAULT_PREVIEW", @"");
        }
        case TSInfoMessageCallEnd: {
            NSString *preview = self.customAttributedMessage.string;
            BOOL isPreviewAvailable = preview && preview.length > 0;
            return isPreviewAvailable ? preview : Localized(@"CALL_END_INFO_MESSAGE_DEFAULT_PREVIEW", @"");
        }
        case TSInfoMessageGroupReminder: {
            NSString *preview = self.customAttributedMessage.string;
            BOOL isPreviewAvailable = preview && preview.length > 0;
            return isPreviewAvailable ? preview : Localized(@"GROUP_REMINDER_DEFAULT_PREVIEW", @"");
        }
        case TSInfoMessageMeetingReminder: {
            NSString *preview = self.customAttributedMessage.string;
            BOOL isPreviewAvailable = preview && preview.length > 0;
            return isPreviewAvailable ? preview : Localized(@"MEETING_REMINDER_DEFAULT_PREVIEW", @"");
        }
        case TSInfoMessageGroupRemoveMember: {
            return self.customAttributedMessage.string;
        }
        case TSInfoMessageGroupPublishRuleChange: {
            NSString *preview = self.customAttributedMessage.string;
//            BOOL isPreviewAvailable = preview && preview.length > 0;
//            return isPreviewAvailable ? preview : Localized(@"MEETING_REMINDER_DEFAULT_PREVIEW", @"");
            return preview;
        }
        case TSInfoMessageGroupMemberChangeMeetingAlert: {
            return self.customAttributedMessage.string;
        }
        case TSInfoMessageGroupAddMember: {
            return _customMessage != nil ? _customMessage : Localized(@"GROUP_UPDATED", nil);
        }
        case TSInfoMessageCoWorkerApproved: {
            return _customMessage;
        }
        case TSInfoMessageAddToContactsSucess: {//New contact added
            return Localized(@"NEW_CONTACT_ADDED", @"");
        }
        case TSInfoMessageNotFriend: {
            return Localized(@"CONTACT_NOTFRIEND_INFO_MSG", @"");
        }
        case TSInfoMessageAskFriend: {
            return _customMessage;
        }
        case TSInfoMessageScreenshotMessage: {
            return _customMessage;
        }
        case TSInfoMessageReportedMessage: {
            return _customMessage;
        }
        case TSInfoMessageResetIdentityKey: {
            return _customMessage;
        }
        case TSInfoMessageArchiveMessage: {
            return _customMessage;
        }
        default:
            break;
    }

    return @"Unknown Info Message Type";
}

- (NSString *)defaultPermissionForbiddenInfo {

    NSString *botName = TSConstants.officialBotName;
    NSString *msgText = [NSString stringWithFormat:Localized(@"CONTACT_DETAIL_COMM_TYPE_FORBIDDEN", @"Operation denied, please contact xxBot"), botName];
    return msgText;
}

#pragma mark - OWSReadTracking

- (BOOL)shouldAffectUnreadCounts
{
    return NO;
}

- (uint64_t)expireStartedAt
{
    if(self.messageType == TSInfoMessageRecallMessage){
        return [super expireStartedAt];
    }
    return 0;
}

- (void)markAsReadAtPosition:(DTReadPositionEntity *)readPosition
              sendReadReceipt:(BOOL)sendReadReceipt
                  transaction:(SDSAnyWriteTransaction *)transaction
{
    OWSAssertDebug(transaction);

    if (_read) {
        return;
    }

    OWSLogInfo(
        @"marking as read uniqueId: %@ which has timestamp: %llu", self.uniqueId, self.timestamp);
//    [self anyUpdateInfoMessageWithTransaction:transaction
//                                        block:^(TSInfoMessage *message) {
//                                            message.read = YES;
//                                        }];

    // Ignore sendReadReceipt, it doesn't apply to info messages.
}

- (void)updateAssociatedRecordsWithTransaction:(SDSAnyWriteTransaction *)transaction{
    TSThread *thread = [self threadWithTransaction:transaction];
    if (thread.isArchived) {
        [thread anyUpdateWithTransaction:transaction block:^(TSThread * _Nonnull t) {
            [t unarchiveThread];
        }];
    }
    
    if([self.recall checkIntegrity]){
        DTRealSourceEntity *realSource = self.recall.source;
        OWSRecall *recall = [[OWSRecall alloc] initWithTimestamp:self.timestamp
                                                    sourceDevice:self.sourceDeviceId
                                                          source:self.authorId
                                               originalTimestamp:realSource.timestamp
                                            originalSourceDevice:realSource.sourceDevice
                                                  originalSource:realSource.source
                                                originalUniqueId:self.uniqueId
                                                        editable:self.editable];
        [recall anyInsertWithTransaction:transaction];
    }
}


#pragma mark - Any Transaction Hooks

- (void)anyDidInsertWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidInsertWithTransaction:transaction];

    [self updateAssociatedRecordsWithTransaction:transaction];

}

- (void)anyDidUpdateWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidUpdateWithTransaction:transaction];

    [self updateAssociatedRecordsWithTransaction:transaction];

}

- (void)anyDidRemoveWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidRemoveWithTransaction:transaction];
    
//    if([self.recall checkIntegrity]){
//        OWSRecall *recall = [OWSRecall anyFetchWithUniqueId:self.uniqueId transaction:transaction];
//        [recall anyRemoveWithTransaction:transaction];
//    }
}

@end

NS_ASSUME_NONNULL_END
