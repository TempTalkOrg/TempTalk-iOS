//
//  Copyright (c) 2022 Open Whisper Systems. All rights reserved.
//

import Foundation
import GRDB
import SignalCoreKit

// NOTE: This file is generated by /Scripts/sds_codegen/sds_generate.py.
// Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// MARK: - Typed Convenience Methods

@objc
public extension DTGroupBaseInfoNotifyEntity {
    // NOTE: This method will fail if the object has unexpected type.
    class func anyFetchDTGroupBaseInfoNotifyEntity(
        uniqueId: String,
        transaction: SDSAnyReadTransaction
    ) -> DTGroupBaseInfoNotifyEntity? {
        assert(uniqueId.count > 0)

        guard let object = anyFetch(uniqueId: uniqueId,
                                    transaction: transaction) else {
                                        return nil
        }
        guard let instance = object as? DTGroupBaseInfoNotifyEntity else {
            owsFailDebug("Object has unexpected type: \(type(of: object))")
            return nil
        }
        return instance
    }

    // NOTE: This method will fail if the object has unexpected type.
    func anyUpdateDTGroupBaseInfoNotifyEntity(transaction: SDSAnyWriteTransaction, block: (DTGroupBaseInfoNotifyEntity) -> Void) {
        anyUpdate(transaction: transaction) { (object) in
            guard let instance = object as? DTGroupBaseInfoNotifyEntity else {
                owsFailDebug("Object has unexpected type: \(type(of: object))")
                return
            }
            block(instance)
        }
    }
}

// MARK: - SDSSerializer

// The SDSSerializer protocol specifies how to insert and update the
// row that corresponds to this model.
class DTGroupBaseInfoNotifyEntitySerializer: SDSSerializer {

    private let model: DTGroupBaseInfoNotifyEntity
    public required init(model: DTGroupBaseInfoNotifyEntity) {
        self.model = model
    }

    // MARK: - Record

    func asRecord() throws -> SDSRecord {
        let id: Int64? = model.grdbId?.int64Value

        let recordType: SDSRecordType = .dTGroupBaseInfoNotifyEntity
        let uniqueId: String = model.uniqueId

        // Properties
        let action: DTGroupNotifyAction? = model.action
        let anyoneRemove: Bool = model.anyoneRemove
        let avatar: String = model.avatar
        let gid: String = model.gid
        let invitationRule: UInt32? = archiveOptionalNSNumber(model.invitationRule, conversion: { $0.uint32Value })
        let messageExpiry: Int64? = archiveOptionalNSNumber(model.messageExpiry, conversion: { $0.int64Value })
        let name: String = model.name
        let rejoin: Bool = model.rejoin
        let remindCycle: String = model.remindCycle
        let ext: Bool = model.ext
        let publishRule: UInt32? = archiveOptionalNSNumber(model.publishRule, conversion: { $0.uint32Value })
        let messageClearAnchor: UInt64 = model.messageClearAnchor

        return DTGroupBaseInfoEntityRecord(delegate: model, id: id, recordType: recordType, uniqueId: uniqueId, action: action, anyoneRemove: anyoneRemove, avatar: avatar, gid: gid, invitationRule: invitationRule, messageExpiry: messageExpiry, name: name, rejoin: rejoin, remindCycle: remindCycle, ext: ext, publishRule: publishRule, messageClearAnchor: messageClearAnchor)
    }
}
                                                                          