//
//  Copyright (c) 2022 Open Whisper Systems. All rights reserved.
//

import Foundation
import GRDB
import SignalCoreKit

// NOTE: This file is generated by /Scripts/sds_codegen/sds_generate.py.
// Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// MARK: - Record

public struct AttachmentRecord: SDSRecord {
    public weak var delegate: SDSRecordDelegate?

    public var tableMetadata: SDSTableMetadata {
        TSAttachmentSerializer.table
    }

    public static var databaseTableName: String {
        TSAttachmentSerializer.table.tableName
    }

    public var id: Int64?

    // This defines all of the columns used in the table
    // where this model (and any subclasses) are persisted.
    public let recordType: SDSRecordType
    public let uniqueId: String

    // Properties
    public let attachmentSchemaVersion: UInt
    public let attachmentType: TSAttachmentType
    public let byteCount: UInt32
    public let cachedAudioDurationSeconds: UInt64?
    public let cachedImageHeight: UInt64?
    public let cachedImageWidth: UInt64?
    public let contentType: String
    public let creationTimestamp: Double?
    public let digest: Data?
    public let encryptedDatalength: Int?
    public let encryptionKey: Data
    public let isDownloaded: Bool
    public let isUploaded: Bool?
    public let lazyRestoreFragmentId: String?
    public let localRelativeFilePath: String?
    public let mostRecentFailureLocalizedText: String?
    public let relay: String?
    public let serverAttachmentId: String?
    public let serverId: UInt64
    public let sourceFilename: String?
    public let state: TSAttachmentPointerState?
    public let albumId: String?
    public let albumMessageId: String?
    public let appearInMediaGallery: Bool
    public let decibelSamples: Data?

    public enum CodingKeys: String, CodingKey, ColumnExpression, CaseIterable {
        case id
        case recordType
        case uniqueId
        case attachmentSchemaVersion
        case attachmentType
        case byteCount
        case cachedAudioDurationSeconds
        case cachedImageHeight
        case cachedImageWidth
        case contentType
        case creationTimestamp
        case digest
        case encryptedDatalength
        case encryptionKey
        case isDownloaded
        case isUploaded
        case lazyRestoreFragmentId
        case localRelativeFilePath
        case mostRecentFailureLocalizedText
        case relay
        case serverAttachmentId
        case serverId
        case sourceFilename
        case state
        case albumId
        case albumMessageId
        case appearInMediaGallery
        case decibelSamples
    }

    public static func columnName(_ column: AttachmentRecord.CodingKeys, fullyQualified: Bool = false) -> String {
        fullyQualified ? "\(databaseTableName).\(column.rawValue)" : column.rawValue
    }

    public func didInsert(with rowID: Int64, for column: String?) {
        guard let delegate = delegate else {
            owsFailDebug("Missing delegate.")
            return
        }
        delegate.updateRowId(rowID)
    }
}

// MARK: - Row Initializer

public extension AttachmentRecord {
    static var databaseSelection: [SQLSelectable] {
        CodingKeys.allCases
    }

    init(row: Row) {
        id = row[0]
        recordType = row[1]
        uniqueId = row[2]
        attachmentSchemaVersion = row[3]
        attachmentType = row[4]
        byteCount = row[5]
        cachedAudioDurationSeconds = row[6]
        cachedImageHeight = row[7]
        cachedImageWidth = row[8]
        contentType = row[9]
        creationTimestamp = row[10]
        digest = row[11]
        encryptedDatalength = row[12]
        encryptionKey = row[13]
        isDownloaded = row[14]
        isUploaded = row[15]
        lazyRestoreFragmentId = row[16]
        localRelativeFilePath = row[17]
        mostRecentFailureLocalizedText = row[18]
        relay = row[19]
        serverAttachmentId = row[20]
        serverId = row[21]
        sourceFilename = row[22]
        state = row[23]
        albumId = row[24]
        albumMessageId = row[25]
        appearInMediaGallery = row[26]
        decibelSamples = row[27]
    }
}

// MARK: - StringInterpolation

public extension String.StringInterpolation {
    mutating func appendInterpolation(attachmentColumn column: AttachmentRecord.CodingKeys) {
        appendLiteral(AttachmentRecord.columnName(column))
    }
    mutating func appendInterpolation(attachmentColumnFullyQualified column: AttachmentRecord.CodingKeys) {
        appendLiteral(AttachmentRecord.columnName(column, fullyQualified: true))
    }
}

// MARK: - Deserialization

// TODO: Rework metadata to not include, for example, columns, column indices.
extension TSAttachment {
    // This method defines how to deserialize a model, given a
    // database row.  The recordType column is used to determine
    // the corresponding model class.
    class func fromRecord(_ record: AttachmentRecord) throws -> TSAttachment {

        guard let recordId = record.id else {
            throw SDSError.invalidValue
        }

        switch record.recordType {
        case .attachment:

            let uniqueId: String = record.uniqueId
            let albumId: String? = record.albumId
            let albumMessageId: String? = record.albumMessageId
            let appearInMediaGallery: Bool = record.appearInMediaGallery
            let attachmentSchemaVersion: UInt = record.attachmentSchemaVersion
            let attachmentType: TSAttachmentType = record.attachmentType
            let byteCount: UInt32 = record.byteCount
            let contentType: String = record.contentType
            let encryptionKey: Data = record.encryptionKey
            let isDownloaded: Bool = record.isDownloaded
            let serverId: UInt64 = record.serverId
            let sourceFilename: String? = record.sourceFilename

            return TSAttachment(grdbId: recordId,
                                uniqueId: uniqueId,
                                albumId: albumId,
                                albumMessageId: albumMessageId,
                                appearInMediaGallery: appearInMediaGallery,
                                attachmentSchemaVersion: attachmentSchemaVersion,
                                attachmentType: attachmentType,
                                byteCount: byteCount,
                                contentType: contentType,
                                encryptionKey: encryptionKey,
                                isDownloaded: isDownloaded,
                                serverId: serverId,
                                sourceFilename: sourceFilename)

        case .attachmentPointer:

            let uniqueId: String = record.uniqueId
            let albumId: String? = record.albumId
            let albumMessageId: String? = record.albumMessageId
            let appearInMediaGallery: Bool = record.appearInMediaGallery
            let attachmentSchemaVersion: UInt = record.attachmentSchemaVersion
            let attachmentType: TSAttachmentType = record.attachmentType
            let byteCount: UInt32 = record.byteCount
            let contentType: String = record.contentType
            let encryptionKey: Data = record.encryptionKey
            let isDownloaded: Bool = record.isDownloaded
            let serverId: UInt64 = record.serverId
            let sourceFilename: String? = record.sourceFilename
            let digest: Data? = SDSDeserialization.optionalData(record.digest, name: "digest")
            let mostRecentFailureLocalizedText: String? = record.mostRecentFailureLocalizedText
            let relay: String = try SDSDeserialization.required(record.relay, name: "relay")
            guard let state: TSAttachmentPointerState = record.state else {
               throw SDSError.missingRequiredField
            }

            return TSAttachmentPointer(grdbId: recordId,
                                       uniqueId: uniqueId,
                                       albumId: albumId,
                                       albumMessageId: albumMessageId,
                                       appearInMediaGallery: appearInMediaGallery,
                                       attachmentSchemaVersion: attachmentSchemaVersion,
                                       attachmentType: attachmentType,
                                       byteCount: byteCount,
                                       contentType: contentType,
                                       encryptionKey: encryptionKey,
                                       isDownloaded: isDownloaded,
                                       serverId: serverId,
                                       sourceFilename: sourceFilename,
                                       digest: digest,
                                       mostRecentFailureLocalizedText: mostRecentFailureLocalizedText,
                                       relay: relay,
                                       state: state)

        case .attachmentStream:

            let uniqueId: String = record.uniqueId
            let albumId: String? = record.albumId
            let albumMessageId: String? = record.albumMessageId
            let appearInMediaGallery: Bool = record.appearInMediaGallery
            let attachmentSchemaVersion: UInt = record.attachmentSchemaVersion
            let attachmentType: TSAttachmentType = record.attachmentType
            let byteCount: UInt32 = record.byteCount
            let contentType: String = record.contentType
            let encryptionKey: Data = record.encryptionKey
            let isDownloaded: Bool = record.isDownloaded
            let serverId: UInt64 = record.serverId
            let sourceFilename: String? = record.sourceFilename
            let cachedAudioDurationSeconds: NSNumber? = SDSDeserialization.optionalNumericAsNSNumber(record.cachedAudioDurationSeconds, name: "cachedAudioDurationSeconds", conversion: { NSNumber(value: $0) })
            let cachedImageHeight: NSNumber? = SDSDeserialization.optionalNumericAsNSNumber(record.cachedImageHeight, name: "cachedImageHeight", conversion: { NSNumber(value: $0) })
            let cachedImageWidth: NSNumber? = SDSDeserialization.optionalNumericAsNSNumber(record.cachedImageWidth, name: "cachedImageWidth", conversion: { NSNumber(value: $0) })
            guard let creationTimestampInterval: Double = record.creationTimestamp else {
               throw SDSError.missingRequiredField
            }
            let creationTimestamp: Date = SDSDeserialization.requiredDoubleAsDate(creationTimestampInterval, name: "creationTimestamp")
            let decibelSamplesSerialized: Data? = record.decibelSamples
            let decibelSamples: [NSNumber]? = try SDSDeserialization.optionalUnarchive(decibelSamplesSerialized, name: "decibelSamples")
            let digest: Data? = SDSDeserialization.optionalData(record.digest, name: "digest")
            let encryptedDatalength: Int = try SDSDeserialization.required(record.encryptedDatalength, name: "encryptedDatalength")
            let isUploaded: Bool = try SDSDeserialization.required(record.isUploaded, name: "isUploaded")
            let lazyRestoreFragmentId: String? = record.lazyRestoreFragmentId
            let localRelativeFilePath: String? = record.localRelativeFilePath
            let serverAttachmentId: String = try SDSDeserialization.required(record.serverAttachmentId, name: "serverAttachmentId")

            return TSAttachmentStream(grdbId: recordId,
                                      uniqueId: uniqueId,
                                      albumId: albumId,
                                      albumMessageId: albumMessageId,
                                      appearInMediaGallery: appearInMediaGallery,
                                      attachmentSchemaVersion: attachmentSchemaVersion,
                                      attachmentType: attachmentType,
                                      byteCount: byteCount,
                                      contentType: contentType,
                                      encryptionKey: encryptionKey,
                                      isDownloaded: isDownloaded,
                                      serverId: serverId,
                                      sourceFilename: sourceFilename,
                                      cachedAudioDurationSeconds: cachedAudioDurationSeconds,
                                      cachedImageHeight: cachedImageHeight,
                                      cachedImageWidth: cachedImageWidth,
                                      creationTimestamp: creationTimestamp,
                                      decibelSamples: decibelSamples,
                                      digest: digest,
                                      encryptedDatalength: encryptedDatalength,
                                      isUploaded: isUploaded,
                                      lazyRestoreFragmentId: lazyRestoreFragmentId,
                                      localRelativeFilePath: localRelativeFilePath,
                                      serverAttachmentId: serverAttachmentId)

        default:
            owsFailDebug("Unexpected record type: \(record.recordType)")
            throw SDSError.invalidValue
        }
    }
}

// MARK: - SDSModel

extension TSAttachment: SDSModel {
    public var serializer: SDSSerializer {
        // Any subclass can be cast to it's superclass,
        // so the order of this switch statement matters.
        // We need to do a "depth first" search by type.
        switch self {
        case let model as TSAttachmentStream:
            assert(type(of: model) == TSAttachmentStream.self)
            return TSAttachmentStreamSerializer(model: model)
        case let model as TSAttachmentPointer:
            assert(type(of: model) == TSAttachmentPointer.self)
            return TSAttachmentPointerSerializer(model: model)
        default:
            return TSAttachmentSerializer(model: self)
        }
    }

    public func asRecord() throws -> SDSRecord {
        try serializer.asRecord()
    }

    public var sdsTableName: String {
        AttachmentRecord.databaseTableName
    }

    public static var table: SDSTableMetadata {
        TSAttachmentSerializer.table
    }
}

// MARK: - DeepCopyable

extension TSAttachment: DeepCopyable {

    public func deepCopy() throws -> AnyObject {
        // Any subclass can be cast to it's superclass,
        // so the order of this switch statement matters.
        // We need to do a "depth first" search by type.
        guard let id = self.grdbId?.int64Value else {
            throw OWSAssertionError("Model missing grdbId.")
        }

        if let modelToCopy = self as? TSAttachmentStream {
            assert(type(of: modelToCopy) == TSAttachmentStream.self)
            let uniqueId: String = modelToCopy.uniqueId
            let albumId: String? = modelToCopy.albumId
            let albumMessageId: String? = modelToCopy.albumMessageId
            let appearInMediaGallery: Bool = modelToCopy.appearInMediaGallery
            let attachmentSchemaVersion: UInt = modelToCopy.attachmentSchemaVersion
            let attachmentType: TSAttachmentType = modelToCopy.attachmentType
            let byteCount: UInt32 = modelToCopy.byteCount
            let contentType: String = modelToCopy.contentType
            let encryptionKey: Data = modelToCopy.encryptionKey
            let isDownloaded: Bool = modelToCopy.isDownloaded
            let serverId: UInt64 = modelToCopy.serverId
            let sourceFilename: String? = modelToCopy.sourceFilename
            let cachedAudioDurationSeconds: NSNumber? = modelToCopy.cachedAudioDurationSeconds
            let cachedImageHeight: NSNumber? = modelToCopy.cachedImageHeight
            let cachedImageWidth: NSNumber? = modelToCopy.cachedImageWidth
            let creationTimestamp: Date = modelToCopy.creationTimestamp
            // NOTE: If this generates build errors, you made need to
            // modify DeepCopy.swift to support this type.
            //
            // That might mean:
            //
            // * Implement DeepCopyable for this type (e.g. a model).
            // * Modify DeepCopies.deepCopy() to support this type (e.g. a collection).
            let decibelSamples: [NSNumber]?
            if let decibelSamplesForCopy = modelToCopy.decibelSamples {
               decibelSamples = try DeepCopies.deepCopy(decibelSamplesForCopy)
            } else {
               decibelSamples = nil
            }
            let digest: Data? = modelToCopy.digest
            let encryptedDatalength: Int = modelToCopy.encryptedDatalength
            let isUploaded: Bool = modelToCopy.isUploaded
            let lazyRestoreFragmentId: String? = modelToCopy.lazyRestoreFragmentId
            let localRelativeFilePath: String? = modelToCopy.localRelativeFilePath
            let serverAttachmentId: String = modelToCopy.serverAttachmentId

            return TSAttachmentStream(grdbId: id,
                                      uniqueId: uniqueId,
                                      albumId: albumId,
                                      albumMessageId: albumMessageId,
                                      appearInMediaGallery: appearInMediaGallery,
                                      attachmentSchemaVersion: attachmentSchemaVersion,
                                      attachmentType: attachmentType,
                                      byteCount: byteCount,
                                      contentType: contentType,
                                      encryptionKey: encryptionKey,
                                      isDownloaded: isDownloaded,
                                      serverId: serverId,
                                      sourceFilename: sourceFilename,
                                      cachedAudioDurationSeconds: cachedAudioDurationSeconds,
                                      cachedImageHeight: cachedImageHeight,
                                      cachedImageWidth: cachedImageWidth,
                                      creationTimestamp: creationTimestamp,
                                      decibelSamples: decibelSamples,
                                      digest: digest,
                                      encryptedDatalength: encryptedDatalength,
                                      isUploaded: isUploaded,
                                      lazyRestoreFragmentId: lazyRestoreFragmentId,
                                      localRelativeFilePath: localRelativeFilePath,
                                      serverAttachmentId: serverAttachmentId)
        }

        if let modelToCopy = self as? TSAttachmentPointer {
            assert(type(of: modelToCopy) == TSAttachmentPointer.self)
            let uniqueId: String = modelToCopy.uniqueId
            let albumId: String? = modelToCopy.albumId
            let albumMessageId: String? = modelToCopy.albumMessageId
            let appearInMediaGallery: Bool = modelToCopy.appearInMediaGallery
            let attachmentSchemaVersion: UInt = modelToCopy.attachmentSchemaVersion
            let attachmentType: TSAttachmentType = modelToCopy.attachmentType
            let byteCount: UInt32 = modelToCopy.byteCount
            let contentType: String = modelToCopy.contentType
            let encryptionKey: Data = modelToCopy.encryptionKey
            let isDownloaded: Bool = modelToCopy.isDownloaded
            let serverId: UInt64 = modelToCopy.serverId
            let sourceFilename: String? = modelToCopy.sourceFilename
            let digest: Data? = modelToCopy.digest
            let mostRecentFailureLocalizedText: String? = modelToCopy.mostRecentFailureLocalizedText
            let relay: String = modelToCopy.relay
            let state: TSAttachmentPointerState = modelToCopy.state

            return TSAttachmentPointer(grdbId: id,
                                       uniqueId: uniqueId,
                                       albumId: albumId,
                                       albumMessageId: albumMessageId,
                                       appearInMediaGallery: appearInMediaGallery,
                                       attachmentSchemaVersion: attachmentSchemaVersion,
                                       attachmentType: attachmentType,
                                       byteCount: byteCount,
                                       contentType: contentType,
                                       encryptionKey: encryptionKey,
                                       isDownloaded: isDownloaded,
                                       serverId: serverId,
                                       sourceFilename: sourceFilename,
                                       digest: digest,
                                       mostRecentFailureLocalizedText: mostRecentFailureLocalizedText,
                                       relay: relay,
                                       state: state)
        }

        do {
            let modelToCopy = self
            assert(type(of: modelToCopy) == TSAttachment.self)
            let uniqueId: String = modelToCopy.uniqueId
            let albumId: String? = modelToCopy.albumId
            let albumMessageId: String? = modelToCopy.albumMessageId
            let appearInMediaGallery: Bool = modelToCopy.appearInMediaGallery
            let attachmentSchemaVersion: UInt = modelToCopy.attachmentSchemaVersion
            let attachmentType: TSAttachmentType = modelToCopy.attachmentType
            let byteCount: UInt32 = modelToCopy.byteCount
            let contentType: String = modelToCopy.contentType
            let encryptionKey: Data = modelToCopy.encryptionKey
            let isDownloaded: Bool = modelToCopy.isDownloaded
            let serverId: UInt64 = modelToCopy.serverId
            let sourceFilename: String? = modelToCopy.sourceFilename

            return TSAttachment(grdbId: id,
                                uniqueId: uniqueId,
                                albumId: albumId,
                                albumMessageId: albumMessageId,
                                appearInMediaGallery: appearInMediaGallery,
                                attachmentSchemaVersion: attachmentSchemaVersion,
                                attachmentType: attachmentType,
                                byteCount: byteCount,
                                contentType: contentType,
                                encryptionKey: encryptionKey,
                                isDownloaded: isDownloaded,
                                serverId: serverId,
                                sourceFilename: sourceFilename)
        }

    }
}

// MARK: - Table Metadata

extension TSAttachmentSerializer {

    // This defines all of the columns used in the table
    // where this model (and any subclasses) are persisted.
    static var idColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "id", columnType: .primaryKey) }
    static var recordTypeColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "recordType", columnType: .int64) }
    static var uniqueIdColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "uniqueId", columnType: .unicodeString, isUnique: true) }
    // Properties
    static var attachmentSchemaVersionColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "attachmentSchemaVersion", columnType: .int64) }
    static var attachmentTypeColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "attachmentType", columnType: .int) }
    static var byteCountColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "byteCount", columnType: .int64) }
    static var cachedAudioDurationSecondsColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "cachedAudioDurationSeconds", columnType: .int64, isOptional: true) }
    static var cachedImageHeightColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "cachedImageHeight", columnType: .int64, isOptional: true) }
    static var cachedImageWidthColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "cachedImageWidth", columnType: .int64, isOptional: true) }
    static var contentTypeColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "contentType", columnType: .unicodeString) }
    static var creationTimestampColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "creationTimestamp", columnType: .double, isOptional: true) }
    static var digestColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "digest", columnType: .blob, isOptional: true) }
    static var encryptedDatalengthColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "encryptedDatalength", columnType: .int64, isOptional: true) }
    static var encryptionKeyColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "encryptionKey", columnType: .blob) }
    static var isDownloadedColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "isDownloaded", columnType: .int) }
    static var isUploadedColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "isUploaded", columnType: .int, isOptional: true) }
    static var lazyRestoreFragmentIdColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "lazyRestoreFragmentId", columnType: .unicodeString, isOptional: true) }
    static var localRelativeFilePathColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "localRelativeFilePath", columnType: .unicodeString, isOptional: true) }
    static var mostRecentFailureLocalizedTextColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "mostRecentFailureLocalizedText", columnType: .unicodeString, isOptional: true) }
    static var relayColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "relay", columnType: .unicodeString, isOptional: true) }
    static var serverAttachmentIdColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "serverAttachmentId", columnType: .unicodeString, isOptional: true) }
    static var serverIdColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "serverId", columnType: .int64) }
    static var sourceFilenameColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "sourceFilename", columnType: .unicodeString, isOptional: true) }
    static var stateColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "state", columnType: .int, isOptional: true) }
    static var albumIdColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "albumId", columnType: .unicodeString, isOptional: true) }
    static var albumMessageIdColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "albumMessageId", columnType: .unicodeString, isOptional: true) }
    static var appearInMediaGalleryColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "appearInMediaGallery", columnType: .int) }
    static var decibelSamplesColumn: SDSColumnMetadata { SDSColumnMetadata(columnName: "decibelSamples", columnType: .blob, isOptional: true) }

    // TODO: We should decide on a naming convention for
    //       tables that store models.
    public static var table: SDSTableMetadata {
        SDSTableMetadata(collection: TSAttachment.collection(),
                         tableName: "model_TSAttachment",
                         columns: [
        idColumn,
        recordTypeColumn,
        uniqueIdColumn,
        attachmentSchemaVersionColumn,
        attachmentTypeColumn,
        byteCountColumn,
        cachedAudioDurationSecondsColumn,
        cachedImageHeightColumn,
        cachedImageWidthColumn,
        contentTypeColumn,
        creationTimestampColumn,
        digestColumn,
        encryptedDatalengthColumn,
        encryptionKeyColumn,
        isDownloadedColumn,
        isUploadedColumn,
        lazyRestoreFragmentIdColumn,
        localRelativeFilePathColumn,
        mostRecentFailureLocalizedTextColumn,
        relayColumn,
        serverAttachmentIdColumn,
        serverIdColumn,
        sourceFilenameColumn,
        stateColumn,
        albumIdColumn,
        albumMessageIdColumn,
        appearInMediaGalleryColumn,
        decibelSamplesColumn
        ])
    }
}

// MARK: - Save/Remove/Update

@objc
public extension TSAttachment {
    func anyInsert(transaction: SDSAnyWriteTransaction) {
        sdsSave(saveMode: .insert, transaction: transaction)
    }

    // Avoid this method whenever feasible.
    //
    // If the record has previously been saved, this method does an overwriting
    // update of the corresponding row, otherwise if it's a new record, this
    // method inserts a new row.
    //
    // For performance, when possible, you should explicitly specify whether
    // you are inserting or updating rather than calling this method.
    func anyUpsert(transaction: SDSAnyWriteTransaction) {
        let isInserting: Bool
        if TSAttachment.anyFetch(uniqueId: uniqueId, transaction: transaction) != nil {
            isInserting = false
        } else {
            isInserting = true
        }
        sdsSave(saveMode: isInserting ? .insert : .update, transaction: transaction)
    }

    // This method is used by "updateWith..." methods.
    //
    // This model may be updated from many threads. We don't want to save
    // our local copy (this instance) since it may be out of date.  We also
    // want to avoid re-saving a model that has been deleted.  Therefore, we
    // use "updateWith..." methods to:
    //
    // a) Update a property of this instance.
    // b) If a copy of this model exists in the database, load an up-to-date copy,
    //    and update and save that copy.
    // b) If a copy of this model _DOES NOT_ exist in the database, do _NOT_ save
    //    this local instance.
    //
    // After "updateWith...":
    //
    // a) Any copy of this model in the database will have been updated.
    // b) The local property on this instance will always have been updated.
    // c) Other properties on this instance may be out of date.
    //
    // All mutable properties of this class have been made read-only to
    // prevent accidentally modifying them directly.
    //
    // This isn't a perfect arrangement, but in practice this will prevent
    // data loss and will resolve all known issues.
    func anyUpdate(transaction: SDSAnyWriteTransaction, block: (TSAttachment) -> Void) {

        block(self)

        guard let dbCopy = type(of: self).anyFetch(uniqueId: uniqueId,
                                                   transaction: transaction) else {
            return
        }

        // Don't apply the block twice to the same instance.
        // It's at least unnecessary and actually wrong for some blocks.
        // e.g. `block: { $0 in $0.someField++ }`
        if dbCopy !== self {
            block(dbCopy)
        }

        dbCopy.sdsSave(saveMode: .update, transaction: transaction)
    }

    // This method is an alternative to `anyUpdate(transaction:block:)` methods.
    //
    // We should generally use `anyUpdate` to ensure we're not unintentionally
    // clobbering other columns in the database when another concurrent update
    // has occurred.
    //
    // There are cases when this doesn't make sense, e.g. when  we know we've
    // just loaded the model in the same transaction. In those cases it is
    // safe and faster to do a "overwriting" update
    func anyOverwritingUpdate(transaction: SDSAnyWriteTransaction) {
        sdsSave(saveMode: .update, transaction: transaction)
    }

    func anyRemove(transaction: SDSAnyWriteTransaction) {
        sdsRemove(transaction: transaction)
    }

    func anyReload(transaction: SDSAnyReadTransaction) {
        anyReload(transaction: transaction, ignoreMissing: false)
    }

    func anyReload(transaction: SDSAnyReadTransaction, ignoreMissing: Bool) {
        guard let latestVersion = type(of: self).anyFetch(uniqueId: uniqueId, transaction: transaction) else {
            if !ignoreMissing {
                owsFailDebug("`latest` was unexpectedly nil")
            }
            return
        }

        setValuesForKeys(latestVersion.dictionaryValue)
    }
}

// MARK: - TSAttachmentCursor

@objc
public class TSAttachmentCursor: NSObject, SDSCursor {
    private let transaction: GRDBReadTransaction
    private let cursor: RecordCursor<AttachmentRecord>?

    init(transaction: GRDBReadTransaction, cursor: RecordCursor<AttachmentRecord>?) {
        self.transaction = transaction
        self.cursor = cursor
    }

    public func next() throws -> TSAttachment? {
        guard let cursor = cursor else {
            return nil
        }
        guard let record = try cursor.next() else {
            return nil
        }
        let value = try TSAttachment.fromRecord(record)
        Self.modelReadCaches.attachmentReadCache.didReadAttachment(value, transaction: transaction.asAnyRead)
        return value
    }

    public func all() throws -> [TSAttachment] {
        var result = [TSAttachment]()
        while true {
            guard let model = try next() else {
                break
            }
            result.append(model)
        }
        return result
    }
}

// MARK: - Obj-C Fetch

// TODO: We may eventually want to define some combination of:
//
// * fetchCursor, fetchOne, fetchAll, etc. (ala GRDB)
// * Optional "where clause" parameters for filtering.
// * Async flavors with completions.
//
// TODO: I've defined flavors that take a read transaction.
//       Or we might take a "connection" if we end up having that class.
@objc
public extension TSAttachment {
    class func grdbFetchCursor(transaction: GRDBReadTransaction) -> TSAttachmentCursor {
        let database = transaction.database
        do {
            let cursor = try AttachmentRecord.fetchCursor(database)
            return TSAttachmentCursor(transaction: transaction, cursor: cursor)
        } catch {
            owsFailDebug("Read failed: \(error)")
            return TSAttachmentCursor(transaction: transaction, cursor: nil)
        }
    }

    // Fetches a single model by "unique id".
    class func anyFetch(uniqueId: String,
                        transaction: SDSAnyReadTransaction) -> TSAttachment? {
        assert(uniqueId.count > 0)

        return anyFetch(uniqueId: uniqueId, transaction: transaction, ignoreCache: false)
    }

    // Fetches a single model by "unique id".
    class func anyFetch(uniqueId: String,
                        transaction: SDSAnyReadTransaction,
                        ignoreCache: Bool) -> TSAttachment? {
        assert(uniqueId.count > 0)

        if !ignoreCache,
            let cachedCopy = Self.modelReadCaches.attachmentReadCache.getAttachment(uniqueId: uniqueId, transaction: transaction) {
            return cachedCopy
        }

        switch transaction.readTransaction {
        //Kris GRDB
        case .grdbRead(let grdbTransaction):
            let sql = "SELECT * FROM \(AttachmentRecord.databaseTableName) WHERE \(attachmentColumn: .uniqueId) = ?"
            return grdbFetchOne(sql: sql, arguments: [uniqueId], transaction: grdbTransaction)
        }
    }

    // Traverses all records.
    // Records are not visited in any particular order.
    class func anyEnumerate(transaction: SDSAnyReadTransaction,
                            block: @escaping (TSAttachment, UnsafeMutablePointer<ObjCBool>) -> Void) {
        anyEnumerate(transaction: transaction, batched: false, block: block)
    }

    // Traverses all records.
    // Records are not visited in any particular order.
    class func anyEnumerate(transaction: SDSAnyReadTransaction,
                            batched: Bool = false,
                            block: @escaping (TSAttachment, UnsafeMutablePointer<ObjCBool>) -> Void) {
        let batchSize = batched ? Batching.kDefaultBatchSize : 0
        anyEnumerate(transaction: transaction, batchSize: batchSize, block: block)
    }

    // Traverses all records.
    // Records are not visited in any particular order.
    //
    // If batchSize > 0, the enumeration is performed in autoreleased batches.
    class func anyEnumerate(transaction: SDSAnyReadTransaction,
                            batchSize: UInt,
                            block: @escaping (TSAttachment, UnsafeMutablePointer<ObjCBool>) -> Void) {
        switch transaction.readTransaction {
        //Kris GRDB
        case .grdbRead(let grdbTransaction):
            let cursor = TSAttachment.grdbFetchCursor(transaction: grdbTransaction)
            Batching.loop(batchSize: batchSize,
                          loopBlock: { stop in
                                do {
                                    guard let value = try cursor.next() else {
                                        stop.pointee = true
                                        return
                                    }
                                    block(value, stop)
                                } catch let error {
                                    owsFailDebug("Couldn't fetch model: \(error)")
                                }
                              })
        }
    }

    // Traverses all records' unique ids.
    // Records are not visited in any particular order.
    class func anyEnumerateUniqueIds(transaction: SDSAnyReadTransaction,
                                     block: @escaping (String, UnsafeMutablePointer<ObjCBool>) -> Void) {
        anyEnumerateUniqueIds(transaction: transaction, batched: false, block: block)
    }

    // Traverses all records' unique ids.
    // Records are not visited in any particular order.
    class func anyEnumerateUniqueIds(transaction: SDSAnyReadTransaction,
                                     batched: Bool = false,
                                     block: @escaping (String, UnsafeMutablePointer<ObjCBool>) -> Void) {
        let batchSize = batched ? Batching.kDefaultBatchSize : 0
        anyEnumerateUniqueIds(transaction: transaction, batchSize: batchSize, block: block)
    }

    // Traverses all records' unique ids.
    // Records are not visited in any particular order.
    //
    // If batchSize > 0, the enumeration is performed in autoreleased batches.
    class func anyEnumerateUniqueIds(transaction: SDSAnyReadTransaction,
                                     batchSize: UInt,
                                     block: @escaping (String, UnsafeMutablePointer<ObjCBool>) -> Void) {
        switch transaction.readTransaction {
        //Kris GRDB
        case .grdbRead(let grdbTransaction):
            grdbEnumerateUniqueIds(transaction: grdbTransaction,
                                   sql: """
                    SELECT \(attachmentColumn: .uniqueId)
                    FROM \(AttachmentRecord.databaseTableName)
                """,
                batchSize: batchSize,
                block: block)
        }
    }

    // Does not order the results.
    class func anyFetchAll(transaction: SDSAnyReadTransaction) -> [TSAttachment] {
        var result = [TSAttachment]()
        anyEnumerate(transaction: transaction) { (model, _) in
            result.append(model)
        }
        return result
    }

    // Does not order the results.
    class func anyAllUniqueIds(transaction: SDSAnyReadTransaction) -> [String] {
        var result = [String]()
        anyEnumerateUniqueIds(transaction: transaction) { (uniqueId, _) in
            result.append(uniqueId)
        }
        return result
    }

    class func anyCount(transaction: SDSAnyReadTransaction) -> UInt {
        switch transaction.readTransaction {
        //Kris GRDB
        case .grdbRead(let grdbTransaction):
            return AttachmentRecord.ows_fetchCount(grdbTransaction.database)
        }
    }

    // WARNING: Do not use this method for any models which do cleanup
    //          in their anyWillRemove(), anyDidRemove() methods.
    class func anyRemoveAllWithoutInstantation(transaction: SDSAnyWriteTransaction) {
        switch transaction.writeTransaction {
        //Kris GRDB
        case .grdbWrite(let grdbTransaction):
            do {
                try AttachmentRecord.deleteAll(grdbTransaction.database)
            } catch {
                owsFailDebug("deleteAll() failed: \(error)")
            }
        }

        if ftsIndexMode != .never {
            FullTextSearchFinder.allModelsWereRemoved(collection: collection(), transaction: transaction)
        }
    }

    class func anyRemoveAllWithInstantation(transaction: SDSAnyWriteTransaction) {
        // To avoid mutationDuringEnumerationException, we need
        // to remove the instances outside the enumeration.
        let uniqueIds = anyAllUniqueIds(transaction: transaction)

        var index: Int = 0
        Batching.loop(batchSize: Batching.kDefaultBatchSize,
                      loopBlock: { stop in
            guard index < uniqueIds.count else {
                stop.pointee = true
                return
            }
            let uniqueId = uniqueIds[index]
            index += 1
            guard let instance = anyFetch(uniqueId: uniqueId, transaction: transaction) else {
                owsFailDebug("Missing instance.")
                return
            }
            instance.anyRemove(transaction: transaction)
        })

        if ftsIndexMode != .never {
            FullTextSearchFinder.allModelsWereRemoved(collection: collection(), transaction: transaction)
        }
    }

    class func anyExists(
        uniqueId: String,
        transaction: SDSAnyReadTransaction
    ) -> Bool {
        assert(uniqueId.count > 0)

        switch transaction.readTransaction {
        //Kris GRDB
        case .grdbRead(let grdbTransaction):
            let sql = "SELECT EXISTS ( SELECT 1 FROM \(AttachmentRecord.databaseTableName) WHERE \(attachmentColumn: .uniqueId) = ? )"
            let arguments: StatementArguments = [uniqueId]
            return try! Bool.fetchOne(grdbTransaction.database, sql: sql, arguments: arguments) ?? false
        }
    }
}

// MARK: - Swift Fetch

public extension TSAttachment {
    class func grdbFetchCursor(sql: String,
                               arguments: StatementArguments = StatementArguments(),
                               transaction: GRDBReadTransaction) -> TSAttachmentCursor {
        do {
            let sqlRequest = SQLRequest<Void>(sql: sql, arguments: arguments, cached: true)
            let cursor = try AttachmentRecord.fetchCursor(transaction.database, sqlRequest)
            return TSAttachmentCursor(transaction: transaction, cursor: cursor)
        } catch {
            Logger.verbose("sql: \(sql)")
            owsFailDebug("Read failed: \(error)")
            return TSAttachmentCursor(transaction: transaction, cursor: nil)
        }
    }

    class func grdbFetchOne(sql: String,
                            arguments: StatementArguments = StatementArguments(),
                            transaction: GRDBReadTransaction) -> TSAttachment? {
        assert(sql.count > 0)

        do {
            let sqlRequest = SQLRequest<Void>(sql: sql, arguments: arguments, cached: true)
            guard let record = try AttachmentRecord.fetchOne(transaction.database, sqlRequest) else {
                return nil
            }

            let value = try TSAttachment.fromRecord(record)
            Self.modelReadCaches.attachmentReadCache.didReadAttachment(value, transaction: transaction.asAnyRead)
            return value
        } catch {
            owsFailDebug("error: \(error)")
            return nil
        }
    }
}

// MARK: - SDSSerializer

// The SDSSerializer protocol specifies how to insert and update the
// row that corresponds to this model.
class TSAttachmentSerializer: SDSSerializer {

    private let model: TSAttachment
    public required init(model: TSAttachment) {
        self.model = model
    }

    // MARK: - Record

    func asRecord() throws -> SDSRecord {
        let id: Int64? = model.grdbId?.int64Value

        let recordType: SDSRecordType = .attachment
        let uniqueId: String = model.uniqueId

        // Properties
        let attachmentSchemaVersion: UInt = model.attachmentSchemaVersion
        let attachmentType: TSAttachmentType = model.attachmentType
        let byteCount: UInt32 = model.byteCount
        let cachedAudioDurationSeconds: UInt64? = nil
        let cachedImageHeight: UInt64? = nil
        let cachedImageWidth: UInt64? = nil
        let contentType: String = model.contentType
        let creationTimestamp: Double? = nil
        let digest: Data? = nil
        let encryptedDatalength: Int? = nil
        let encryptionKey: Data = model.encryptionKey
        let isDownloaded: Bool = model.isDownloaded
        let isUploaded: Bool? = nil
        let lazyRestoreFragmentId: String? = nil
        let localRelativeFilePath: String? = nil
        let mostRecentFailureLocalizedText: String? = nil
        let relay: String? = nil
        let serverAttachmentId: String? = nil
        let serverId: UInt64 = model.serverId
        let sourceFilename: String? = model.sourceFilename
        let state: TSAttachmentPointerState? = nil
        let albumId: String? = model.albumId
        let albumMessageId: String? = model.albumMessageId
        let appearInMediaGallery: Bool = model.appearInMediaGallery
        let decibelSamples: Data? = nil

        return AttachmentRecord(delegate: model, id: id, recordType: recordType, uniqueId: uniqueId, attachmentSchemaVersion: attachmentSchemaVersion, attachmentType: attachmentType, byteCount: byteCount, cachedAudioDurationSeconds: cachedAudioDurationSeconds, cachedImageHeight: cachedImageHeight, cachedImageWidth: cachedImageWidth, contentType: contentType, creationTimestamp: creationTimestamp, digest: digest, encryptedDatalength: encryptedDatalength, encryptionKey: encryptionKey, isDownloaded: isDownloaded, isUploaded: isUploaded, lazyRestoreFragmentId: lazyRestoreFragmentId, localRelativeFilePath: localRelativeFilePath, mostRecentFailureLocalizedText: mostRecentFailureLocalizedText, relay: relay, serverAttachmentId: serverAttachmentId, serverId: serverId, sourceFilename: sourceFilename, state: state, albumId: albumId, albumMessageId: albumMessageId, appearInMediaGallery: appearInMediaGallery, decibelSamples: decibelSamples)
    }
}

// MARK: - Deep Copy

#if TESTABLE_BUILD
@objc
public extension TSAttachment {
    // We're not using this method at the moment,
    // but we might use it for validation of
    // other deep copy methods.
    func deepCopyUsingRecord() throws -> TSAttachment {
        guard let record = try asRecord() as? AttachmentRecord else {
            throw OWSAssertionError("Could not convert to record.")
        }
        return try TSAttachment.fromRecord(record)
    }
}
#endif
                                                                                                 