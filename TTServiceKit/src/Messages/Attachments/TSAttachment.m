//
//  Copyright (c) 2018 Open Whisper Systems. All rights reserved.
//

#import "TSAttachment.h"
#import "MIMETypeUtil.h"
#import "NSString+SSK.h"
#import <TTServiceKit/TTServiceKit-Swift.h>

NS_ASSUME_NONNULL_BEGIN

NSUInteger const TSAttachmentSchemaVersion = 4;

@interface TSAttachment ()

@property (nonatomic, readonly) NSUInteger attachmentSchemaVersion;

@property (nonatomic, nullable) NSString *sourceFilename;

@property (nonatomic) NSString *contentType;

@end

@implementation TSAttachment

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
                         albumId:(nullable NSString *)albumId
                  albumMessageId:(nullable NSString *)albumMessageId
            appearInMediaGallery:(BOOL)appearInMediaGallery
         attachmentSchemaVersion:(NSUInteger)attachmentSchemaVersion
                  attachmentType:(TSAttachmentType)attachmentType
                       byteCount:(unsigned int)byteCount
                     contentType:(NSString *)contentType
                   encryptionKey:(NSData *)encryptionKey
                    isDownloaded:(BOOL)isDownloaded
                        serverId:(unsigned long long)serverId
                  sourceFilename:(nullable NSString *)sourceFilename
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId];

    if (!self) {
        return self;
    }

    _albumId = albumId;
    _albumMessageId = albumMessageId;
    _appearInMediaGallery = appearInMediaGallery;
    _attachmentSchemaVersion = attachmentSchemaVersion;
    _attachmentType = attachmentType;
    _byteCount = byteCount;
    _contentType = contentType;
    _encryptionKey = encryptionKey;
    _isDownloaded = isDownloaded;
    _serverId = serverId;
    _sourceFilename = sourceFilename;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

// This constructor is used for new instances of TSAttachmentPointer,
// i.e. undownloaded incoming attachments.
- (instancetype)initWithServerId:(UInt64)serverId
                   encryptionKey:(NSData *)encryptionKey
                       byteCount:(UInt32)byteCount
                     contentType:(NSString *)contentType
                  sourceFilename:(nullable NSString *)sourceFilename
                  albumMessageId:(nullable NSString *)albumMessageId
                         albumId:(nullable NSString *)albumId
{
    OWSAssertDebug(serverId > 0);
    OWSAssertDebug(encryptionKey.length > 0);
    if (byteCount <= 0) {
        // This will fail with legacy iOS clients which don't upload attachment size.
        DDLogWarn(@"%@ Missing byteCount for attachment with serverId: %lld", self.logTag, serverId);
    }
    if (contentType.length < 1) {
        DDLogWarn(@"%@ incoming attachment has invalid content type", self.logTag);

        contentType = OWSMimeTypeApplicationOctetStream;
    }
    OWSAssertDebug(contentType.length > 0);

    self = [super init];
    if (!self) {
        return self;
    }

    _serverId = serverId;
    _encryptionKey = encryptionKey;
    _byteCount = byteCount;
    _contentType = contentType;
    _sourceFilename = sourceFilename;

    _attachmentSchemaVersion = TSAttachmentSchemaVersion;
    
    _albumMessageId = albumMessageId;
    _albumId = albumId;

    return self;
}

// This constructor is used for new instances of TSAttachmentStream
// that represent new, un-uploaded outgoing attachments.
- (instancetype)initWithContentType:(NSString *)contentType
                          byteCount:(UInt32)byteCount
                     sourceFilename:(nullable NSString *)sourceFilename
                     albumMessageId:(nullable NSString *)albumMessageId
                            albumId:(nullable NSString *)albumId
{
    if (contentType.length < 1) {
        DDLogWarn(@"%@ outgoing attachment has invalid content type", self.logTag);

        contentType = OWSMimeTypeApplicationOctetStream;
    }
    OWSAssertDebug(contentType.length > 0);
    OWSAssertDebug(byteCount > 0);

    self = [super init];
    if (!self) {
        return self;
    }
    DDLogVerbose(@"%@ init attachment with uniqueId: %@", self.logTag, self.uniqueId);

    _contentType = contentType;
    _byteCount = byteCount;
    _sourceFilename = sourceFilename;

    _attachmentSchemaVersion = TSAttachmentSchemaVersion;
    
    _albumMessageId = albumMessageId;
    _albumId = albumId;

    return self;
}

// This constructor is used for new instances of TSAttachmentStream
// that represent downloaded incoming attachments.
- (instancetype)initWithPointer:(TSAttachment *)pointer albumMessageId:(nullable NSString *)albumMessageId albumId:(nullable NSString *)albumId
{
    OWSAssertDebug(pointer.serverId > 0);
    OWSAssertDebug(pointer.encryptionKey.length > 0);
    if (pointer.byteCount <= 0) {
        // This will fail with legacy iOS clients which don't upload attachment size.
        DDLogWarn(@"%@ Missing pointer.byteCount for attachment with serverId: %lld", self.logTag, pointer.serverId);
    }
    OWSAssertDebug(pointer.contentType.length > 0);

    // Once saved, this AttachmentStream will replace the AttachmentPointer in the attachments collection.
    self = [super initWithUniqueId:pointer.uniqueId];
    if (!self) {
        return self;
    }
    
    if(pointer.grdbId){
        [self updateRowId:pointer.grdbId.unsignedIntegerValue];
    }

    _serverId = pointer.serverId;
    _encryptionKey = pointer.encryptionKey;
    _byteCount = pointer.byteCount;
    _sourceFilename = pointer.sourceFilename;
    NSString *contentType = pointer.contentType;
    if (contentType.length < 1) {
        DDLogWarn(@"%@ incoming attachment has invalid content type", self.logTag);

        contentType = OWSMimeTypeApplicationOctetStream;
    }
    _contentType = contentType;

    _attachmentSchemaVersion = TSAttachmentSchemaVersion;
    
    _albumMessageId = albumMessageId;
    _albumId = albumId;

    return self;
}

- (nullable instancetype)initWithCoder:(NSCoder *)coder
{
    self = [super initWithCoder:coder];
    if (!self) {
        return self;
    }

    if (_attachmentSchemaVersion < TSAttachmentSchemaVersion) {
        [self upgradeFromAttachmentSchemaVersion:_attachmentSchemaVersion];
        _attachmentSchemaVersion = TSAttachmentSchemaVersion;
    }

    if (!_sourceFilename) {
        // renamed _filename to _sourceFilename
        _sourceFilename = [coder decodeObjectForKey:@"filename"];
        OWSAssertDebug(!_sourceFilename || [_sourceFilename isKindOfClass:[NSString class]]);
    }

    if (_contentType.length < 1) {
        DDLogWarn(@"%@ legacy attachment has invalid content type", self.logTag);

        _contentType = OWSMimeTypeApplicationOctetStream;
    }

    return self;
}

- (void)upgradeFromAttachmentSchemaVersion:(NSUInteger)attachmentSchemaVersion
{
    // This method is overridden by the base classes TSAttachmentPointer and
    // TSAttachmentStream.
}

+ (NSString *)collection {
    return @"TSAttachements";
}

- (NSString *)description {
    NSString *attachmentString = Localized(@"QUOTED_REPLY_TYPE_ATTACHMENT", nil);

    if ([MIMETypeUtil isAudio:self.contentType]) {
        // a missing filename is the legacy way to determine if an audio attachment is
        // a voice note vs. other arbitrary audio attachments.
        if (self.isVoiceMessage || !self.sourceFilename || self.sourceFilename.length == 0) {
            //ðŸŽ¤
            attachmentString = Localized(@"ATTACHMENT_TYPE_VOICE_MESSAGE",
                @"Short text label for a voice message attachment, used for thread preview and on the lock screen");

        } else {
            if (DTParamsUtils.validateString(_sourceFilename)) {
                attachmentString = _sourceFilename;
            } else {
                attachmentString = Localized(@"QUOTED_REPLY_TYPE_AUDIO", @"");
            }
        }
    } else if ([MIMETypeUtil isImage:self.contentType]) {
        attachmentString = Localized(@"QUOTED_REPLY_TYPE_IMAGE", @"");
    } else if ([MIMETypeUtil isVideo:self.contentType]) {
        attachmentString = Localized(@"QUOTED_REPLY_TYPE_VIDEO", @"");
    } else if ([MIMETypeUtil isAnimated:self.contentType]) {
        attachmentString = Localized(@"QUOTED_REPLY_TYPE_GIF", @"");
    } else {
        attachmentString = Localized(@"QUOTED_REPLY_TYPE_ATTACHMENT", @"");
    }

    return attachmentString;
}

+ (NSString *)emojiForMimeType:(NSString *)contentType
{
    if ([MIMETypeUtil isImage:contentType]) {
        return @"ðŸ“·";
    } else if ([MIMETypeUtil isVideo:contentType]) {
        return @"ðŸŽ¥";
    } else if ([MIMETypeUtil isAudio:contentType]) {
        if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(11, 0)) {
            return @"ðŸŽ§";
        } else {
            return @"ðŸ“»";
        }
    } else if ([MIMETypeUtil isAnimated:contentType]) {
        return @"ðŸŽ¡";
    } else {
        return @"ðŸ“Ž";
    }
}

+ (BOOL)hasFileSource:(nullable NSString *)fileName {
    if (fileName && fileName.filterFilename && fileName.filterFilename.length > 0) {
        return YES;
    } else {
        return NO;
    }
}

- (BOOL)isVoiceMessage
{
    return self.attachmentType == TSAttachmentTypeVoiceMessage;
}

- (nullable NSString *)sourceFilename
{
    return _sourceFilename.filterFilename;
}

- (NSString *)contentType
{
    return _contentType.filterFilename;
}

- (nullable DSKProtoAttachmentPointer *)buildProto
{
    OWSFailDebug(@"This method should be overriden in subclasses.");
    return nil;
}

#pragma mark -

- (void)anyDidInsertWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidInsertWithTransaction:transaction];

    [self.modelReadCaches.attachmentReadCache didInsertOrUpdateAttachment:self transaction:transaction];
}

- (void)anyDidUpdateWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidUpdateWithTransaction:transaction];

    [self.modelReadCaches.attachmentReadCache didInsertOrUpdateAttachment:self transaction:transaction];
}

- (void)anyDidRemoveWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidRemoveWithTransaction:transaction];

    [self.modelReadCaches.attachmentReadCache didRemoveAttachment:self transaction:transaction];
}

@end

NS_ASSUME_NONNULL_END
