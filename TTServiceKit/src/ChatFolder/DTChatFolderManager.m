//
//  DTChatFolderManager.m
//  TTServiceKit
//
//  Created by Ethan on 2022/4/19.
//

#import "DTChatFolderManager.h"
#import "TSGroupThread.h"
#import "TSContactThread.h"
#import "OWSRequestFactory.h"
//
#import "NSNotificationCenter+OWS.h"
#import "DTGroupBaseInfoEntity.h"
#import <SignalCoreKit/Threading.h>
#import "DTThreadHelper.h"
#import <TTServiceKit/TTServiceKit-Swift.h>
#import "DTChatFolderConfig.h"
#import "TSAccountManager.h"

NSString *const kChatFolderVersionKey = @"DTChatFolderVersionKey";
NSString *const kChatFolderUpdateKey = @"kChatFolderUpdateKey";

NSString *const kChatFolderUnreadKey = @"Unread";
NSString *const kChatFolderAtMeKey = @"@Me";
NSString *const kChatFolderPrivateKey = @"Private";
NSString *const kChatFolderVegaKey = @"Vega";

NSString *const DTChatFolderErrorDomain = @"DTChatFolderErrorDomain";

@implementation DTFolderThreadEntity

- (instancetype)initWithThread:(TSThread *)thread {
    
    NSString *serverThreadId = nil;
    if (self = [super init]) {
        if ([thread isKindOfClass:TSGroupThread.class]) {
            self.type = DTFolderThreadTypeGroup;
        }
        if ([thread isKindOfClass:TSContactThread.class]) {
            self.type = DTFolderThreadTypeContact;
        }
        serverThreadId = thread.serverThreadId;
        self.id = serverThreadId;
    }
    return !serverThreadId ? nil : self;
}

+ (NSDictionary *)JSONKeyPathsByPropertyKey {
    
    return [NSDictionary mtl_identityPropertyMapWithModel:[self class]];
}

@end

@implementation DTFolderConditions

+ (NSDictionary *)JSONKeyPathsByPropertyKey {
    
    return [NSDictionary mtl_identityPropertyMapWithModel:[self class]];
}

@end


@implementation DTChatFolderEntity

- (nonnull instancetype)init {
    if (self = [super init]) {
        
    }
    return self;
}

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
                            cIds:(NSArray<DTFolderThreadEntity *> *)cIds
                      conditions:(nullable DTFolderConditions *)conditions
                  excludeFromAll:(BOOL)excludeFromAll
                      folderType:(DTFolderType)folderType
                            name:(NSString *)name
                       sortIndex:(NSInteger)sortIndex
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId];

    if (!self) {
        return self;
    }

    _cIds = cIds;
    _conditions = conditions;
    _excludeFromAll = excludeFromAll;
    _folderType = folderType;
    _name = name;
    _sortIndex = sortIndex;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

+ (NSDictionary *)JSONKeyPathsByPropertyKey {
    
    NSMutableDictionary *map = [[NSDictionary mtl_identityPropertyMapWithModel:[self class]] mutableCopy];
    map[@"folderType"] = @"type";
    return [map copy];
}

+ (NSValueTransformer *)cIdsJSONTransformer {
    
    return [MTLJSONAdapter arrayTransformerWithModelClass:[DTFolderThreadEntity class]];
}

- (void)anyWillInsertWithTransaction:(SDSAnyWriteTransaction *)transaction{
    self.uniqueId = [kChatFolderUniqueIdPrefix stringByAppendingString:self.name];
    [super anyWillInsertWithTransaction:transaction];
}

- (void)anyWillUpdateWithTransaction:(SDSAnyWriteTransaction *)transaction{
    self.uniqueId = [kChatFolderUniqueIdPrefix stringByAppendingString:self.name];
    [super anyWillUpdateWithTransaction:transaction];
}

- (NSString *)displayName {
    
    if ([self.name isEqualToString:kChatFolderPrivateKey]) {
        return Localized(@"CHAT_FOLDER_RECOMMEDN_PRIVATE", @"");
    } else if ([self.name isEqualToString:kChatFolderUnreadKey]) {
        return Localized(@"CHAT_FOLDER_RECOMMEDN_UNREAD", @"");
    } else if ([self.name isEqualToString:kChatFolderAtMeKey]) {
        return Localized(@"CHAT_FOLDER_RECOMMEDN_ATME", @"");
    }
    
    return self.name;
}

- (BOOL)isEqual:(id)object {
    
    if (self == object) {
        return YES;
    }
    
    if (![object isKindOfClass:[DTChatFolderEntity class]]) {
        return NO;
    }

    return [self isEqualToFolder:(DTChatFolderEntity *)object];
}

- (BOOL)isEqualToFolder:(DTChatFolderEntity *)otherFolder {
        
    BOOL isNameEqual = [self.name isEqualToString:otherFolder.name];
    
    BOOL isContainThreadsEqual = NO;
    NSMutableSet <NSString *> *threadIds = [NSMutableSet new];
    NSMutableSet <NSString *> *otherThreadIds = [NSMutableSet new];
    [self.cIds enumerateObjectsUsingBlock:^(DTFolderThreadEntity * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        if (!obj.id) return;
        [threadIds addObject:obj.id];
    }];
    [otherFolder.cIds enumerateObjectsUsingBlock:^(DTFolderThreadEntity * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        if (!obj.id) return;
        [otherThreadIds addObject:obj.id];
        
    }];
    isContainThreadsEqual = [threadIds isEqualToSet:otherThreadIds] || (!self.cIds && !otherFolder.cIds);
    
    BOOL isConditionsEqual = NO;
    if (isNameEqual) {
        BOOL isKeywordsEqual = (!self.conditions.keywords && !otherFolder.conditions.keywords) || [self.conditions.keywords.lowercaseString isEqualToString:otherFolder.conditions.keywords.lowercaseString];
        BOOL isGroupOwnersEqual = [self isGroupOwnersEqual:otherFolder.conditions.groupOwners];
        isConditionsEqual = isKeywordsEqual && isGroupOwnersEqual;
    }
    
    return isNameEqual && isContainThreadsEqual && isConditionsEqual;
}

- (NSInteger)numberOfThreadsWithTransaction:(SDSAnyReadTransaction *)transaction {
    
    __block NSInteger numberOfthreads = 0;
    
    AnyThreadFinder *finder = [[AnyThreadFinder alloc] init];
    finder.currentFolder = self;
    NSError *error;
    [finder enumerateVisibleThreadsWithIsArchived:NO
                                      transaction:transaction
                                            error:&error
                                            block:^(TSThread * object) {
        if (![object isKindOfClass:[TSGroupThread class]] && ![object isKindOfClass:[TSContactThread class]]) {
            return;
        }
        TSThread *thread = (TSThread *)object;
        //MARK: 推荐folder特殊处理
        if (self.folderType == DTFolderTypeRecommend) {
            if (!thread.shouldBeVisible || thread.isArchived || thread.isRemovedFromConversation) {
                return;
            }
            if ([self.name isEqualToString:kChatFolderPrivateKey]) {
                if ([thread isKindOfClass:[TSContactThread class]]) {
                    numberOfthreads += 1;
                }
            } else if ([self.name isEqualToString:kChatFolderUnreadKey]) {
                
                if ([thread unreadMessageCount] > 0 || (thread.isUnread && thread.lastMessageDate.ows_millisecondsSince1970 <= thread.unreadTimeStimeStamp)) {
                    numberOfthreads += 1;
                }
            } else if ([self.name isEqualToString:kChatFolderAtMeKey]) {
                NSString *localNumber = [[TSAccountManager shared] localNumberWithTransaction:transaction];
                if (!thread.isGroupThread) {
                    return;
                }
                if (!localNumber) {
                    return;
                }
                NSString *atPersons = [thread atPersonsWithTransaction:transaction];
                if ([atPersons containsString:localNumber] || [atPersons containsString:MENTIONS_ALL]) {
                    numberOfthreads += 1;
                }
            } else if ([self.name isEqualToString:kChatFolderVegaKey]) {
                if(thread.isGroupThread &&
                   [((TSGroupThread *)thread) businessFromVega]){
                    numberOfthreads += 1;
                }
            }
        }
        
        if ([self isManualContainThread:thread]) {
            numberOfthreads += 1;
        } else if ([self isConditonsContainThread:thread transaction:transaction]) {
            if (thread.isArchived || thread.isRemovedFromConversation) {
                return;
            }
            if (!thread.isGroupThread && !thread.shouldBeVisible) {
                return;
            }
            numberOfthreads += 1;
        }
    }];
    
    return numberOfthreads;
    
}

- (BOOL)isContainThread:(TSThread *)thread transaction:(SDSAnyReadTransaction *)transaction {
    
    return [self isConditonsContainThread:thread transaction:transaction] || [self isManualContainThread:thread];
}

//MARK: keywords可以筛选出已经退出的群，groupOwners不能
- (BOOL)isConditonsContainThread:(TSThread *)thread transaction:(SDSAnyReadTransaction *)transaction{
    
    NSString *keywords = self.conditions.keywords;
    NSString *groupOwners = self.conditions.groupOwners;

    BOOL hasKeywords = keywords != nil && keywords.length > 0;
    BOOL hasGroupOwners = groupOwners != nil && groupOwners.length > 0;
    if (!hasKeywords && !hasGroupOwners) {
        return NO;
    }
    
    BOOL isKeywordsContain = NO;
    if (hasKeywords) {
        NSString *lowercaseThreadName = [thread nameWithTransaction:transaction].lowercaseString;
        NSString *lowercaseKeywords = keywords.lowercaseString;
        isKeywordsContain = [lowercaseThreadName containsString:lowercaseKeywords];
    }
    
    BOOL isGroupOwnerContain = NO;
    if (hasGroupOwners && thread.isGroupThread) {
        TSGroupThread *groupThread = (TSGroupThread *)thread;
        if (![groupThread isLocalUserInGroupWithTransaction:transaction]) return NO;
        NSString *groupOwner = groupThread.groupModel.groupOwner;
        isGroupOwnerContain = !groupOwner ? NO : [groupOwners containsString:groupOwner];
    }
    
    return isKeywordsContain || isGroupOwnerContain;
}

- (BOOL)isManualContainThread:(TSThread *)thread {
        
    if (!self.cIds || self.cIds.count == 0 || !thread.serverThreadId) {
        return NO;
    }
    
    __block BOOL isManual = NO;
    [self.cIds enumerateObjectsUsingBlock:^(DTFolderThreadEntity * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        if (!obj.id) return;
        if ([thread.serverThreadId isEqualToString:obj.id]) {
            isManual = YES;
            *stop = YES;
        }
    }];

    return isManual;
}

- (BOOL)isGroupOwnersEqual:(NSString *)otherGroupOwners {
    
    NSString *groupOwners = self.conditions.groupOwners;
    if (!groupOwners && !otherGroupOwners) return YES;
    else if (groupOwners && !otherGroupOwners) return NO;
    else if (!groupOwners && otherGroupOwners) return NO;
    
    NSArray <NSString *> *owners = [groupOwners componentsSeparatedByString:@","];
    NSArray <NSString *> *otherOwners = [otherGroupOwners componentsSeparatedByString:@","];
    NSSet <NSString *> *ownersSet = [NSSet setWithArray:owners];
    NSSet <NSString *> *otherOwnersSet = [NSSet setWithArray:otherOwners];

    return [ownersSet isEqualToSet:otherOwnersSet];
}

@end


@interface DTChatFolderManager ()

@end

@implementation DTChatFolderManager

+ (NSArray <NSString *> *)recommendKeys {
    
    return  @[kChatFolderUnreadKey,
              kChatFolderAtMeKey,
              kChatFolderPrivateKey,
              kChatFolderVegaKey
    ];
    
}

+ (NSString *)folderAllKey {
    return Localized(@"CHAT_FOLDER_NAME_ALL", @"");
}

+ (instancetype)sharedManager {
    
    static DTChatFolderManager *manager = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        manager = [DTChatFolderManager new];
    });
    return manager;
}

+ (NSInteger)leftCount {
    
    __block NSInteger numberOfCustom = 0;
    [[DTChatFolderManager sharedManager].chatFolders enumerateObjectsUsingBlock:^(DTChatFolderEntity * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        if (obj.folderType == DTFolderTypeCustom) {
            numberOfCustom += 1;
        }
    }];
    
    return [DTChatFolderConfig fetchChatFolderConfig].maxFolderCount - numberOfCustom;
}

- (NSArray <DTChatFolderEntity *> *)fetchChatFolders {
    
    __block NSArray <DTChatFolderEntity *> *chatFolders = nil;
    [self.databaseStorage readWithBlock:^(SDSAnyReadTransaction * _Nonnull transaction) {
        chatFolders = [self fetchChatFolders:transaction];
    }];
    
    return chatFolders;
}

- (NSArray <DTChatFolderEntity *> *)fetchChatFolders:(SDSAnyReadTransaction *)transaction {
    
    NSMutableArray <DTChatFolderEntity *> *chatFolders = @[].mutableCopy;
    [DTChatFolderEntity anyEnumerateWithTransaction:transaction
                                            batched:YES
                                              block:^(DTChatFolderEntity * object, BOOL * stop) {
        if (object && [object isKindOfClass:DTChatFolderEntity.class]) {
            
            [chatFolders addObject:object];
            
            if([object.name isEqualToString:kChatFolderVegaKey]){
                [DTChatFolderManager sharedManager].excludeVegaFromAll = object.excludeFromAll;
            }
        }
    }];
    
    _chatFolders = chatFolders;
    
    return chatFolders.copy;
    
}

+ (void)saveChatFolders:(NSArray <DTChatFolderEntity *> *)chatFolders
                success:(void(^)(void))success
                failure:(void(^)(NSError *error))failure {
        
    NSError *error;
    NSArray *paramArray = [MTLJSONAdapter JSONArrayFromModels:chatFolders error:&error];
    if (error) {
        if (failure) {
            failure(error);
            OWSLogError(@"%@", error.localizedDescription);
        }
        return;
    }
    NSMutableArray *tmpParam = @[].mutableCopy;
    [paramArray enumerateObjectsUsingBlock:^(id _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        NSMutableDictionary *tmpFolder = [(NSDictionary *)obj mutableCopy];
        [tmpFolder removeObjectForKey:@"sortIndex"];
        [tmpFolder removeObjectForKey:@"uniqueId"];
        [tmpFolder removeObjectForKey:@"grdbId"];
        [tmpFolder removeObjectForKey:@"displayName"];
        if ([self.recommendKeys containsObject:tmpFolder[@"name"]]) {
            if(![tmpFolder[@"name"] isEqualToString:kChatFolderVegaKey] || [tmpFolder[@"type"] integerValue] == DTFolderTypeRecommend){
                tmpFolder[@"cIds"] = @[];
                [tmpFolder removeObjectForKey:@"conditions"];
                
            }
        }
        [tmpParam addObject:tmpFolder.copy];
    }];
    
    NSInteger newVersion = [DTChatFolderManager chatFolderVersion] + 1;
    NSDictionary *folderParam = @{@"value" : tmpParam.copy, @"version" : @(newVersion)};
    TSRequest *request = [OWSRequestFactory putV1ProfileWithParams:@{@"privateConfigs" : @{@"chatFolder" : folderParam}}];
    [self.networkManager makeRequest:request success:^(id<HTTPResponse>  _Nonnull response) {
        [self updateChatFolders:chatFolders forceUpdate:NO newVersion:newVersion success:success];
    } failure:^(OWSHTTPErrorWrapper * _Nonnull errorWrapper) {
        NSError *error = errorWrapper.asNSError;
        if (failure) failure(error);
    }];
}

+ (void)updateChatFolders:(NSArray <DTChatFolderEntity *> *)chatFolders
              forceUpdate:(BOOL)forceUpdate
               newVersion:(NSInteger)newVersion
                  success:(void(^)(void))success
              transaction:(SDSAnyWriteTransaction * )transaction {
    
    __block NSString *localInfo = [NSString stringWithFormat:@"[Chat folder] localVersion-%ld\n", [DTChatFolderManager chatFolderVersion]];
    __block NSString *serverInfo = [NSString stringWithFormat:@"serverVersion-%ld\n", newVersion];
    [[DTChatFolderManager sharedManager].chatFolders enumerateObjectsUsingBlock:^(DTChatFolderEntity * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        localInfo = [localInfo stringByAppendingFormat:@"name:%@, threadCount:%ld, keywords:%@\ngroupOwners:%@\n", obj.name, obj.cIds.count, obj.conditions.keywords, obj.conditions.groupOwners];
    }];
    [chatFolders enumerateObjectsUsingBlock:^(DTChatFolderEntity * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        serverInfo = [serverInfo stringByAppendingFormat:@"name:%@, threadCount:%ld, keywords:%@\ngroupOwners:%@\n", obj.name, obj.cIds.count, obj.conditions.keywords, obj.conditions.groupOwners];
    }];
    OWSLogInfo(@"%@", [localInfo stringByAppendingFormat:@"-------------------\n%@", serverInfo]);
    
    NSInteger localVersion = [DTChatFolderManager chatFolderVersion];
    if (!forceUpdate && localVersion > newVersion) {
        return;
    }
    
    [DTChatFolderManager updateChatFolderVersion:newVersion];
    NSArray <DTChatFolderEntity *> *oldChatFolders = [[DTChatFolderManager sharedManager] fetchChatFolders:transaction];
            
    [oldChatFolders enumerateObjectsUsingBlock:^(DTChatFolderEntity * _Nonnull oldFolder, NSUInteger idx, BOOL * _Nonnull stop) {
        [oldFolder anyRemoveWithTransaction:transaction];
    }];
    __block BOOL excludeVegaFromAll = NO;
    [chatFolders enumerateObjectsUsingBlock:^(DTChatFolderEntity * _Nonnull newFolder, NSUInteger idx, BOOL * _Nonnull stop) {
        newFolder.sortIndex = idx;
        if(![newFolder.name isEqualToString:kChatFolderVegaKey]){
            if ([self.recommendKeys containsObject:newFolder.name]) {
                newFolder.folderType = DTFolderTypeRecommend;
            } else {
                newFolder.folderType = DTFolderTypeCustom;
            }
        }
        if (newFolder.cIds && newFolder.cIds.count > 0) {
            NSMutableArray <DTFolderThreadEntity *> *threadEntities = [newFolder.cIds mutableCopy];
            [newFolder.cIds enumerateObjectsUsingBlock:^(DTFolderThreadEntity * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                if (!obj.id) {
                    [threadEntities removeObject:obj];
                }
            }];
            newFolder.cIds = threadEntities.copy;
        }
        
        if([newFolder.name isEqualToString:kChatFolderVegaKey]){
            excludeVegaFromAll = newFolder.excludeFromAll;
        }
        
        DTChatFolderEntity *newFolderToSave = [[DTChatFolderEntity alloc] init];
        newFolderToSave.name = newFolder.name;
        newFolderToSave.folderType = newFolder.folderType;
        newFolderToSave.cIds = newFolder.cIds;
        newFolderToSave.conditions = newFolder.conditions;
        newFolderToSave.sortIndex = newFolder.sortIndex;
        newFolderToSave.excludeFromAll = newFolder.excludeFromAll;
        [newFolderToSave anyInsertWithTransaction:transaction];
    }];
    
    [DTChatFolderManager sharedManager].chatFolders = chatFolders;
    [DTChatFolderManager sharedManager].excludeVegaFromAll = excludeVegaFromAll;
    if (CurrentAppContext().isNSE) {
            [[TSAccountManager sharedInstance].keyValueStore setBool:YES key:kChatFolderUpdateKey transaction:transaction];
        
    } else {
        DispatchMainThreadSafe(^{
            if (success) success();
            id <DTChatFolderManagerDelegate> delegate = [DTChatFolderManager sharedManager].delegate;
            if (delegate && [delegate respondsToSelector:@selector(chatFoldersChanged)]) {
                [delegate chatFoldersChanged];
            }
        });
    }
}

+ (void)updateChatFolders:(NSArray <DTChatFolderEntity *> *)chatFolders
              forceUpdate:(BOOL)forceUpdate
               newVersion:(NSInteger)newVersion
                  success:(void(^)(void))success {

    DatabaseStorageAsyncWrite(self.databaseStorage, ^(SDSAnyWriteTransaction *writeTransaction) {
        [self updateChatFolders:chatFolders forceUpdate:forceUpdate newVersion:newVersion success:success transaction:writeTransaction];
    });
}

+ (TSThread *)getOrCreateThreadWithThreadId:(NSString *)threadId {
    
    __block TSThread *thread = nil;
    DatabaseStorageWrite(self.databaseStorage, ^(SDSAnyWriteTransaction *transaction) {
        thread = [self getOrCreateThreadWithThreadId:threadId transaction:transaction];
    });
    return thread;
}

+ (TSThread *)getOrCreateThreadWithThreadId:(NSString *)threadId
                     transaction:(SDSAnyWriteTransaction *)transaction {

    if ([threadId hasPrefix:@"+"]) {
        return [TSContactThread getOrCreateThreadWithContactId:threadId transaction:transaction];
    }

    return [self getOrCreateGroupThreadWithGid:threadId transaction:transaction];
}

+ (TSGroupThread *)getOrCreateGroupThreadWithGid:(NSString *)gid
                       transaction:(SDSAnyWriteTransaction *)transaction {
    NSData *groupId = [TSGroupThread transformToLocalGroupIdWithServerGroupId:gid];
    DTGroupBaseInfoEntity *groupInfo = [DTGroupBaseInfoEntity anyFetchWithUniqueId:gid transaction:transaction];
    NSString *localNumber = [[TSAccountManager shared] localNumberWithTransaction:transaction];
    NSArray *memberIds = localNumber ? @[localNumber] : @[];
    TSGroupModel *groupModel = [[TSGroupModel alloc] initWithTitle:groupInfo.name memberIds:memberIds image:nil groupId:groupId groupOwner:nil groupAdmin:nil transaction:transaction];
    return [TSGroupThread getOrCreateThreadWithGroupModel:groupModel transaction:transaction];
}

+ (TSThread *)getThreadWithThreadId:(NSString *)threadId {
    
    __block TSThread *thread = nil;
    [self.databaseStorage readWithBlock:^(SDSAnyReadTransaction * _Nonnull transaction) {
        thread = [self getThreadWithThreadId:threadId transaction:transaction];
    }];
    return thread;
}

+ (nullable TSThread *)getThreadWithThreadId:(NSString *)threadId
                     transaction:(SDSAnyReadTransaction *)transaction {

    if ([threadId hasPrefix:@"+"]) {
        return [TSContactThread getThreadWithContactId:threadId transaction:transaction];
    }

    NSData *groupId = [TSGroupThread transformToLocalGroupIdWithServerGroupId:threadId];
    return [TSGroupThread anyFetchGroupThreadWithUniqueId:[TSGroupThread threadIdFromGroupId:groupId] transaction:transaction];
}

+ (NSInteger)chatFolderVersion {
    
    NSInteger version = [CurrentAppContext().appUserDefaults integerForKey:kChatFolderVersionKey];
    
    return version;
}

+ (void)updateChatFolderVersion:(NSInteger)version {
    
    [CurrentAppContext().appUserDefaults setInteger:version forKey:kChatFolderVersionKey];
    [CurrentAppContext().appUserDefaults synchronize];
}

@end
