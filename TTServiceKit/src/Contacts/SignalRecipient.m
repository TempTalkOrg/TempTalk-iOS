//
//  Copyright (c) 2018 Open Whisper Systems. All rights reserved.
//

#import "SignalRecipient.h"
#import "OWSIdentityManager.h"
#import "TSAccountManager.h"
#import <TTServiceKit/TTServiceKit-Swift.h>

NS_ASSUME_NONNULL_BEGIN

@interface SignalRecipient ()

@property NSOrderedSet *devices;

@end

@implementation SignalRecipient

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
                         devices:(NSOrderedSet *)devices
                           relay:(nullable NSString *)relay
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId];

    if (!self) {
        return self;
    }

    _devices = devices;
    _relay = relay;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

+ (NSString *)collection {
    return @"SignalRecipient";
}

+ (void)ensureRecipientExistsWithRecipientId:(NSString *)recipientId
                                    deviceId:(UInt32)deviceId
                                       relay:(NSString *)relay
                                 transaction:(SDSAnyWriteTransaction *)transaction
{
    SignalRecipient *_Nullable existingRecipient =
        [self recipientWithTextSecureIdentifier:recipientId withTransaction:transaction];
    // TODO: 此处出现 existingRecipient 可能为 TSInfoMessage, 查到原因后删除类型判断
    if (!existingRecipient || ![existingRecipient isKindOfClass:SignalRecipient.class]) {
        OWSLogDebug(
            @"%@ in %s creating recipient with deviceId: %u", self.logTag, __PRETTY_FUNCTION__, (unsigned int)deviceId);

        SignalRecipient *newRecipient = [[self alloc] initWithTextSecureIdentifier:recipientId relay:relay];
        [newRecipient addDevices:[NSSet setWithObject:@(deviceId)]];
        [newRecipient anyInsertWithTransaction:transaction];

        return;
    }

    if (![existingRecipient.devices containsObject:@(deviceId)]) {
        OWSLogDebug(@"%@ in %s adding device %u to existing recipient.",
            self.logTag,
            __PRETTY_FUNCTION__,
            (unsigned int)deviceId);

        [existingRecipient addDevices:[NSSet setWithObject:@(deviceId)]];
        [existingRecipient anyInsertWithTransaction:transaction];
    }
}

- (instancetype)initWithTextSecureIdentifier:(NSString *)textSecureIdentifier
                                       relay:(nullable NSString *)relay
{
    self = [self initWithUniqueId:textSecureIdentifier];
    if (!self) {
        return self;
    }

    OWSAssertDebug([TSAccountManager localNumber].length > 0);
    if ([[TSAccountManager localNumber] isEqualToString:textSecureIdentifier]) {
        // Default to no devices.
        //
        // This instance represents our own account and is used for sending
        // sync message to linked devices.  We shouldn't have any linked devices
        // yet when we create the "self" SignalRecipient, and we don't need to
        // send sync messages to the primary - we ARE the primary.
        _devices = [NSOrderedSet new];
    } else {
        // Default to sending to just primary device.
        //
        // OWSMessageSender will correct this if it is wrong the next time
        // we send a message to this recipient.
        _devices = [NSOrderedSet orderedSetWithObject:@(1)];
    }

    _relay = [relay isEqualToString:@""] ? nil : relay;

    return self;
}

- (nullable instancetype)initWithCoder:(NSCoder *)coder
{
    self = [super initWithCoder:coder];
    if (!self) {
        return self;
    }

    if (_devices == nil) {
        _devices = [NSOrderedSet new];
    }

    if ([self.uniqueId isEqual:[TSAccountManager localNumber]] && [self.devices containsObject:@(1)]) { //
        OWSLogError(@"init self as recipient device");
    }

    return self;
}

+ (nullable instancetype)recipientWithTextSecureIdentifier:(NSString *)textSecureIdentifier
                                           withTransaction:(SDSAnyReadTransaction *)transaction
{
    return [SignalRecipient anyFetchWithUniqueId:textSecureIdentifier transaction:transaction];
}

+ (nullable instancetype)recipientWithTextSecureIdentifier:(NSString *)textSecureIdentifier
{
    __block SignalRecipient *recipient;
    [self.databaseStorage readWithBlock:^(SDSAnyReadTransaction * _Nonnull readTransaction) {
        recipient = [self recipientWithTextSecureIdentifier:textSecureIdentifier withTransaction:readTransaction];
    }];
    return recipient;
}

// TODO: This method should probably live on the TSAccountManager rather than grabbing a global singleton.
+ (instancetype)selfRecipientWithTransaction:(SDSAnyReadTransaction *)transaction
{
    NSString *localNumber = [TSAccountManager.shared localNumberWithTransaction:transaction];
    SignalRecipient *myself = [self recipientWithTextSecureIdentifier:localNumber withTransaction:transaction];
    if (!myself) {
        myself = [[self alloc] initWithTextSecureIdentifier:localNumber relay:nil];
    }
    return myself;
}

- (void)addDevices:(NSSet *)set
{
    if ([self.uniqueId isEqual:[TSAccountManager localNumber]] && [set containsObject:@(1)]) {
        OWSFailDebug(@"%@ in %s adding self as recipient device", self.logTag, __PRETTY_FUNCTION__);
        return;
    }

    NSMutableOrderedSet *updatedDevices = [self.devices mutableCopy];
    [updatedDevices unionSet:set];

    self.devices = [updatedDevices copy];
}

- (void)removeDevices:(NSSet *)set
{
    NSMutableOrderedSet *updatedDevices = [self.devices mutableCopy];
    [updatedDevices minusSet:set];

    self.devices = [updatedDevices copy];
}

- (BOOL)supportsVoice
{
    return YES;
}

- (BOOL)supportsWebRTC
{
    return YES;
}

- (NSString *)recipientId
{
    return self.uniqueId;
}

- (NSComparisonResult)compare:(SignalRecipient *)other
{
    return [self.recipientId compare:other.recipientId];
}

#pragma mark - HOOK

- (void)anyDidInsertWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidInsertWithTransaction:transaction];

    [self.modelReadCaches.signalRecipientReadCache didInsertOrUpdateSignalRecipient:self transaction:transaction];

    OWSLogInfo(@"Inserted: %@", self.recipientId);
}

- (void)anyDidUpdateWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidUpdateWithTransaction:transaction];

    [self.modelReadCaches.signalRecipientReadCache didInsertOrUpdateSignalRecipient:self transaction:transaction];
}

- (void)anyDidRemoveWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidRemoveWithTransaction:transaction];

    [self.modelReadCaches.signalRecipientReadCache didRemoveSignalRecipient:self transaction:transaction];
    
}


@end

NS_ASSUME_NONNULL_END
