//
//  Copyright (c) 2018 Open Whisper Systems. All rights reserved.
//

#import "BaseModel.h"

NS_ASSUME_NONNULL_BEGIN

BOOL IsNoteToSelfEnabled(void);

@class OWSDisappearingMessagesConfiguration;
@class TSInteraction;
@class TSMessage;
@class TSIncomingMessage;
@class TSInvalidIdentityKeyReceivingErrorMessage;
@class SDSAnyReadTransaction;
@class SDSAnyWriteTransaction;
@class DTConversationEntity;
@class DTReadPositionEntity;
@class DTMentionedMsgInfo;
@class DTThreadConfigEntity;
@class DTMention;

/**
 *  TSThread is the superclass of TSContactThread and TSGroupThread
 */

@interface TSThread : BaseModel

// YES IFF this thread has ever had a message.
@property (nonatomic) BOOL hasEverHadMessage;
@property (nonatomic) BOOL shouldBeVisible;
@property (nonatomic, nullable) NSNumber *translateSettingType;//语言的设置类型  0:原文 1：中文 2：英文 2

@property (nonatomic,getter=isRemovedFromConversation) BOOL removedFromConversation;//是否从会话页面被移除

// read at
//@property (nonatomic, assign) uint64_t readAtServerTime;

#pragma mark  离线消息相关
// 已读位置
@property (atomic, strong, nullable) DTReadPositionEntity *readPositionEntity;
// 最新的离线消息
@property (atomic, strong, nullable) TSMessage *lastestMsg;

@property (nonatomic, assign, readonly) NSUInteger unreadMessageCount;

@property (nonatomic, strong, nullable) DTMentionedMsgInfo *mentionedMeMsg;
@property (nonatomic, strong, nullable) DTMentionedMsgInfo *mentionedAllMsg;

@property (nonatomic, strong, nullable) DTThreadConfigEntity *threadConfig;

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
                    archivalDate:(nullable NSDate *)archivalDate
              conversationEntity:(nullable DTConversationEntity *)conversationEntity
                    creationDate:(NSDate *)creationDate
             draftQuoteMessageId:(nullable NSString *)draftQuoteMessageId
                expiresInSeconds:(unsigned long long)expiresInSeconds
               hasEverHadMessage:(BOOL)hasEverHadMessage
                      isArchived:(BOOL)isArchived
                 lastMessageDate:(nullable NSDate *)lastMessageDate
                      lastestMsg:(nullable TSMessage *)lastestMsg
                 mentionedAllMsg:(nullable DTMentionedMsgInfo *)mentionedAllMsg
                  mentionedMeMsg:(nullable DTMentionedMsgInfo *)mentionedMeMsg
                   mentionsDraft:(nullable NSArray<DTMention *> *)mentionsDraft
              messageClearAnchor:(unsigned long long)messageClearAnchor
                    messageDraft:(nullable NSString *)messageDraft
                  mutedUntilDate:(nullable NSDate *)mutedUntilDate
                 plainTextEnable:(BOOL)plainTextEnable
              readPositionEntity:(nullable DTReadPositionEntity *)readPositionEntity
         removedFromConversation:(BOOL)removedFromConversation
                 shouldBeVisible:(BOOL)shouldBeVisible
                stickCallingDate:(nullable NSDate *)stickCallingDate
                       stickDate:(nullable NSDate *)stickDate
                    threadConfig:(nullable DTThreadConfigEntity *)threadConfig
            translateSettingType:(nullable NSNumber *)translateSettingType
                      unreadFlag:(unsigned int)unreadFlag
              unreadMessageCount:(NSUInteger)unreadMessageCount
                     unreadState:(NSUInteger)unreadState
            unreadTimeStimeStamp:(unsigned long long)unreadTimeStimeStamp
NS_DESIGNATED_INITIALIZER NS_SWIFT_NAME(init(grdbId:uniqueId:archivalDate:conversationEntity:creationDate:draftQuoteMessageId:expiresInSeconds:hasEverHadMessage:isArchived:lastMessageDate:lastestMsg:mentionedAllMsg:mentionedMeMsg:mentionsDraft:messageClearAnchor:messageDraft:mutedUntilDate:plainTextEnable:readPositionEntity:removedFromConversation:shouldBeVisible:stickCallingDate:stickDate:threadConfig:translateSettingType:unreadFlag:unreadMessageCount:unreadState:unreadTimeStimeStamp:));

// clang-format on

// --- CODE GENERATION MARKER

/**
 *  Whether the object is a group thread or not.
 *
 *  @return YES if is a group thread, NO otherwise.
 */
- (BOOL)isGroupThread;

- (BOOL)isBotThread;

- (BOOL)isLargeGroupThread;

- (BOOL)isWithoutReadRecipt;

- (BOOL)isHavePermissioncanSpeak;

/**
 *  Whether send invitation when start a group meeting.
 *  群成员人数大于阈值，发起群会议时不向群成员发送邀请
 *
 *  @return YES if is don't send invitation, NO otherwise.
 */
- (BOOL)startMeetingWithoutInvitation;

/**
 *  Returns the name of the thread.
 *
 *  @return The name of the thread.
 */
- (NSString *)nameWithTransaction:(nullable SDSAnyReadTransaction *)transaction;

/// debug log
- (NSString *)debugName;

+ (NSString *)stableConversationColorNameForString:(NSString *)colorSeed;

+ (NSString *)conversationSourcePersonColorNameFromString:(NSString *)colorSeed;

+ (NSUInteger)conversationColorNamesCount;

+ (NSString *) topicColorName:(uint32_t) topicColor;

+ (NSString *)conversationSourceGroupColorNameFromString:(NSString *)colorSeed;
/**
 * @returns
 *   Signal Id (e164) of the contact if it's a contact thread.
 */
- (nullable NSString *)contactIdentifier;

/**
 * @returns
 *   Agora uid (e164) of the contact if it's a contact thread.
 */
- (nullable NSString *)contactIdentifier_callNumber;

/**
* @returns
*   Agora uid (e164) of the contact contain mac if it's a contact thread.
*/
- (nullable NSArray<NSString *> *)contactIdentifier_containMac_callNumbers;

/**
* @returns
*   Agora uid 群组
*/
- (NSArray<NSString *> *)recipientIdentifiers_containMac_callNumbers;

/**
 * @returns recipientId for each recipient in the thread
 */
@property (nonatomic, readonly) NSArray<NSString *> *recipientIdentifiers;
@property (nonatomic, readonly) BOOL recipientsContainsBot;

@property (nonatomic, readonly) BOOL isNoteToSelf;

- (BOOL)isNoteToSelfWithTransaction:(SDSAnyReadTransaction *)transaction;

#pragma mark Interactions

- (BOOL)hasSafetyNumbers;

/**
 *  Returns the latest date of a message in the thread or the thread creation date if there are no messages in that
 *thread.
 *
 *  @return The date of the last message or thread creation date.
 */
//- (NSDate *)lastMessageDate;

/**
 *  Returns the string that will be displayed typically in a conversations view as a preview of the last message
 *received in this thread.
 *
 *  @return Thread preview string.
 */
- (NSString *)lastMessageTextWithTransaction:(nullable SDSAnyReadTransaction *)transaction
    NS_SWIFT_NAME(lastMessageText(transaction:));

- (nullable NSString *)atPersonsWithTransaction:(nullable SDSAnyReadTransaction *)transaction
    NS_SWIFT_NAME(atPersons(transaction:));

//- (nullable TSInteraction *)lastInteractionForInboxWithTransaction:(SDSAnyReadTransaction *)transaction
//    NS_SWIFT_NAME(lastInteractionForInbox(transaction:));

/**
 *  Updates the thread's caches of the latest interaction.
 *
 *  @param lastMessage Latest Interaction to take into consideration.
 *  @param transaction Database transaction.
 */
- (void)updateWithLastMessage:(TSInteraction *)lastMessage isInserted:(BOOL)isInserterd transaction:(SDSAnyWriteTransaction *)transaction;

- (void)markAllAsReadWithTransaction:(SDSAnyWriteTransaction *)transaction;

- (void)updateUnreadMessageCountWithTransaction:(SDSAnyReadTransaction *)transaction;
- (void)updateUnreadMessageCount:(NSUInteger)count;
- (NSUInteger)getUnreadMessageCountWithTransaction:(SDSAnyReadTransaction *)transaction;


- (void)updateWithInsertedMessage:(TSInteraction *)message transaction:(SDSAnyWriteTransaction *)transaction;
- (void)updateWithUpdatedMessage:(TSInteraction *)message transaction:(SDSAnyWriteTransaction *)transaction;
- (void)updateWithRemovedMessage:(TSInteraction *)message transaction:(SDSAnyWriteTransaction *)transaction;

#pragma mark Archival

/**
 *  Returns the last date at which a string was archived or nil if the thread was never archived or brought back to the
 *inbox.
 *
 *  @return Last archival date.
 */
//- (nullable NSDate *)archivalDate;

@property (nonatomic, assign, readonly) BOOL isArchived;

/**
 *  Archives a thread with the current date.
 *
 *  @param transaction Database transaction.
 */
- (void)archiveThreadWithTransaction:(SDSAnyWriteTransaction *)transaction;

- (void)archiveOversizeThreadWithTransaction:(SDSAnyWriteTransaction *)transaction;

/**
 *  Unarchives a thread that was archived previously.
 */
- (void)unarchiveThread;

- (void)removeAllThreadInteractionsWithTransaction:(SDSAnyWriteTransaction *)transaction;



#pragma mark Disappearing Messages

// 消息过期时间统一走这个方法，之前的OWSDisappearingMessagesConfiguration废弃
- (uint32_t)messageExpiresInSeconds;
- (uint32_t)messageExpiresInSecondsWithTransaction:(SDSAnyReadTransaction *)transaction;

#pragma mark Drafts

/**
 *  Returns the last known draft for that thread. Always returns a string. Empty string if nil.
 *
 *  @param transaction Database transaction.
 *
 *  @return Last known draft for that thread.
 */
- (NSString *)currentDraftWithTransaction:(SDSAnyReadTransaction *)transaction;

/**
 *  Sets the draft of a thread. Typically called when leaving a conversation view.
 *
 *  @param draftString Draft string to be saved.
 *  @param transaction Database transaction.
 */
- (void)setDraft:(nullable NSString *)draftString transaction:(SDSAnyWriteTransaction *)transaction;

- (TSMessage *)currentDraftQuoteMessageWithTransaction:(SDSAnyReadTransaction *)transaction;

- (void)setDraftQuoteMessageId:(NSString *)messageId transaction:(SDSAnyWriteTransaction *)transaction;

- (void)setMentionsDraft:(NSArray <DTMention *> *)mentionsDraft
             transaction:(SDSAnyWriteTransaction *)transaction;

- (void)clearDraftWithTransaction:(SDSAnyWriteTransaction *)transaction;

- (void)setDraftQuoteMessageId:(NSString *)draftQuoteMessageId;

- (void)setMentionsDraft:(NSArray <DTMention *> *)mentionsDraft;

- (NSArray <DTMention *> *)currentMentionsDraftWithTransaction:(SDSAnyReadTransaction *)transaction;

- (void)clearDraft;

@property (nonatomic, copy, readonly, nullable) NSString *draftQuoteMessageId;

@property (atomic, readonly) BOOL isMuted;
//for local block
@property (atomic, readonly) BOOL isBlocked;
//@property (nonatomic, assign) int32_t messageExpiry;//消息过期时间
@property (atomic, readonly, nullable) NSDate *mutedUntilDate;
@property (atomic, strong, nullable) DTConversationEntity *conversationEntity;
#pragma mark stick

@property (atomic, readonly) BOOL isSticked;

//- (nullable NSDate *)stickDate;

- (void)stickThread;
- (void)unstickThread;
- (void)unstickThreadWithTransaction:(SDSAnyWriteTransaction *)transaction;
#pragma mark call state

@property (atomic, readonly) BOOL isCallingSticked;
//@property (nonatomic, strong) NSNumber *online;
//@property (nonatomic, strong) NSNumber *duration;
//@property (nonatomic, copy, nullable) NSString *channelName;
//@property (nonatomic, copy, nullable) NSString *meetingName;

//- (nullable NSDate *)stickCallingDate;

- (void)stickCallingThreadWithTransaction:(SDSAnyWriteTransaction *)transaction;

- (void)unstickCallingThread;;
- (void)unstickCallingThreadWithTransaction:(SDSAnyWriteTransaction *)transaction;

#pragma mark - Update With... Methods

- (void)updateWithMutedUntilDate:(NSDate *)mutedUntilDate transaction:(SDSAnyWriteTransaction *)transaction;

+ (BOOL)shouldInteractionAppearInInbox:(TSInteraction *)interaction;

#pragma mark - secret

@property (nonatomic, assign) BOOL plainTextEnable;

//这个取的是发送同步消息成功后服务端返回的时间戳
@property (nonatomic, assign) UInt64 unreadTimeStimeStamp;
//0: 清除设定的未读状态 1、 置未读 2、置全部已读
@property (nonatomic, assign) UInt32 unreadFlag;

@property (nonatomic, assign, readonly) BOOL isUnread;//是否置为已读
#pragma mark - server thread id

@property (nonatomic, copy, readonly) NSString *serverThreadId;

- (void)updateReadPositionEntity:(DTReadPositionEntity *)readPositionEntity;

- (BOOL)previewEqualTo:(id)objc;

@property (nonatomic, nullable, readonly) NSArray <DTMention *> *mentionsDraft;
/// 过期时间
@property (nonatomic, assign) UInt64 expiresInSeconds;
/// 锚点信息
@property (nonatomic, assign) UInt64 messageClearAnchor;

@end

NS_ASSUME_NONNULL_END
