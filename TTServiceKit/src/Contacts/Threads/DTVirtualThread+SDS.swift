//
//  Copyright (c) 2022 Open Whisper Systems. All rights reserved.
//

import Foundation
import GRDB
import SignalCoreKit

// NOTE: This file is generated by /Scripts/sds_codegen/sds_generate.py.
// Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// MARK: - Typed Convenience Methods

@objc
public extension DTVirtualThread {
    // NOTE: This method will fail if the object has unexpected type.
    class func anyFetchDTVirtualThread(
        uniqueId: String,
        transaction: SDSAnyReadTransaction
    ) -> DTVirtualThread? {
        assert(uniqueId.count > 0)

        guard let object = anyFetch(uniqueId: uniqueId,
                                    transaction: transaction) else {
                                        return nil
        }
        guard let instance = object as? DTVirtualThread else {
            owsFailDebug("Object has unexpected type: \(type(of: object))")
            return nil
        }
        return instance
    }

    // NOTE: This method will fail if the object has unexpected type.
    func anyUpdateDTVirtualThread(transaction: SDSAnyWriteTransaction, block: (DTVirtualThread) -> Void) {
        anyUpdate(transaction: transaction) { (object) in
            guard let instance = object as? DTVirtualThread else {
                owsFailDebug("Object has unexpected type: \(type(of: object))")
                return
            }
            block(instance)
        }
    }
}

// MARK: - SDSSerializer

// The SDSSerializer protocol specifies how to insert and update the
// row that corresponds to this model.
class DTVirtualThreadSerializer: SDSSerializer {

    private let model: DTVirtualThread
    public required init(model: DTVirtualThread) {
        self.model = model
    }

    // MARK: - Record

    func asRecord() throws -> SDSRecord {
        let id: Int64? = model.grdbId?.int64Value

        let recordType: SDSRecordType = .dTVirtualThread
        let uniqueId: String = model.uniqueId

        // Properties
        let archivalDate: Double? = archiveOptionalDate(model.archivalDate)
        let conversationEntity: Data? = optionalArchive(model.conversationEntity)
        let creationDate: Double = archiveDate(model.creationDate)
        let draftQuoteMessageId: String? = model.draftQuoteMessageId
        let groupModel: Data? = nil
        let hasDismissedOffers: Bool? = nil
        let hasEverHadMessage: Bool = model.hasEverHadMessage
        let lastMessageDate: Double? = archiveOptionalDate(model.lastMessageDate)
        let lastestMsg: Data? = optionalArchive(model.lastestMsg)
        let messageDraft: String? = model.messageDraft
        let mutedUntilDate: Double? = archiveOptionalDate(model.mutedUntilDate)
        let plainTextEnable: Bool = model.plainTextEnable
        let readPositionEntity: Data? = optionalArchive(model.readPositionEntity)
        let removedFromConversation: Bool = model.isRemovedFromConversation
        let stickCallingDate: Double? = archiveOptionalDate(model.stickCallingDate)
        let stickDate: Double? = archiveOptionalDate(model.stickDate)
        let translateSettingType: UInt32? = archiveOptionalNSNumber(model.translateSettingType, conversion: { $0.uint32Value })
        let unreadFlag: UInt32 = model.unreadFlag
        let unreadState: UInt = model.unreadState
        let unreadTimeStimeStamp: UInt64 = model.unreadTimeStimeStamp
        let isArchived: Bool = model.isArchived
        let unreadMessageCount: UInt = model.unreadMessageCount
        let mentionedAllMsg: Data? = optionalArchive(model.mentionedAllMsg)
        let mentionedMeMsg: Data? = optionalArchive(model.mentionedMeMsg)
        let shouldBeVisible: Bool = model.shouldBeVisible
        let threadConfig: Data? = optionalArchive(model.threadConfig)
        let mentionsDraft: Data? = optionalArchive(model.mentionsDraft)
        let friendContactVersion: Int? = nil
        let receivedFriendReq: Bool? = nil
        let expiresInSeconds: UInt64 = model.expiresInSeconds
        let messageClearAnchor: UInt64 = model.messageClearAnchor

        return ThreadRecord(delegate: model, id: id, recordType: recordType, uniqueId: uniqueId, archivalDate: archivalDate, conversationEntity: conversationEntity, creationDate: creationDate, draftQuoteMessageId: draftQuoteMessageId, groupModel: groupModel, hasDismissedOffers: hasDismissedOffers, hasEverHadMessage: hasEverHadMessage, lastMessageDate: lastMessageDate, lastestMsg: lastestMsg, messageDraft: messageDraft, mutedUntilDate: mutedUntilDate, plainTextEnable: plainTextEnable, readPositionEntity: readPositionEntity, removedFromConversation: removedFromConversation, stickCallingDate: stickCallingDate, stickDate: stickDate, translateSettingType: translateSettingType, unreadFlag: unreadFlag, unreadState: unreadState, unreadTimeStimeStamp: unreadTimeStimeStamp, isArchived: isArchived, unreadMessageCount: unreadMessageCount, mentionedAllMsg: mentionedAllMsg, mentionedMeMsg: mentionedMeMsg, shouldBeVisible: shouldBeVisible, threadConfig: threadConfig, mentionsDraft: mentionsDraft, friendContactVersion: friendContactVersion, receivedFriendReq: receivedFriendReq, expiresInSeconds: expiresInSeconds, messageClearAnchor: messageClearAnchor)
    }
}
                                                                           