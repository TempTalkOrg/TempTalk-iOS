//
//  Copyright (c) 2018 Open Whisper Systems. All rights reserved.
//

#import "SignalAccount.h"
#import "Contact.h"
#import "NSString+SSK.h"
//
#import "SignalRecipient.h"
#import "TSGroupThread.h"
#import <TTServiceKit/TTServiceKit-Swift.h>
#import "TextSecureKitEnv.h"

NS_ASSUME_NONNULL_BEGIN

@interface SignalAccount ()

@property (nonatomic) NSString *recipientId;

@end

#pragma mark -

@implementation SignalAccount

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
                         contact:(nullable Contact *)contact
       hasMultipleAccountContact:(BOOL)hasMultipleAccountContact
                  isManualEdited:(BOOL)isManualEdited
        multipleAccountLabelText:(NSString *)multipleAccountLabelText
                     recipientId:(NSString *)recipientId
                      remarkName:(nullable NSString *)remarkName
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId];

    if (!self) {
        return self;
    }

    _contact = contact;
    _hasMultipleAccountContact = hasMultipleAccountContact;
    _isManualEdited = isManualEdited;
    _multipleAccountLabelText = multipleAccountLabelText;
    _recipientId = recipientId;
    _remarkName = remarkName;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

- (instancetype)initWithSignalRecipient:(SignalRecipient *)signalRecipient
{
    OWSAssertDebug(signalRecipient);
    return [self initWithRecipientId:signalRecipient.recipientId];
}

- (instancetype)initWithRecipientId:(NSString *)recipientId
{
    if (self = [super init]) {
        OWSAssertDebug(recipientId.length > 0);

        _recipientId = recipientId;
    }
    return self;
}

- (nullable SignalRecipient *)signalRecipientWithTransaction:(SDSAnyReadTransaction *)transaction
{
    OWSAssertIsOnMainThread();
    OWSAssertDebug(transaction);

    OWSAssertDebug(self.recipientId.length > 0);
    return [SignalRecipient recipientWithTextSecureIdentifier:self.recipientId withTransaction:transaction];
}

+ (nullable SignalAccount *)signalAccountWithRecipientId:(NSString *)recipientId transaction:(SDSAnyReadTransaction *)transaction {
    return [SignalAccount anyFetchWithUniqueId:recipientId transaction:transaction];
}

- (BOOL)isEqualToSignalAccount:(SignalAccount *)signalAccount {
    return [self.recipientId isEqualToString:signalAccount.recipientId]
    && [self.contact isEqualToContact:signalAccount.contact];
//    && (self.hasMultipleAccountContact == signalAccount.hasMultipleAccountContact)
//    && [self.multipleAccountLabelText isEqualToString:signalAccount.multipleAccountLabelText]
//    && (self.isManualEdited == signalAccount.isManualEdited)
//    && [self.remarkName isEqualToString:signalAccount.remarkName];
}

- (BOOL)isEqual:(id)object {
    if(![object isKindOfClass:[SignalAccount class]]) return NO;
    return [self isEqualToSignalAccount:(SignalAccount *)object];
}

- (NSUInteger)hash {
    NSUInteger hash = self.contact.hash;
    return (hash ^ self.recipientId.hash);
}

- (NSString *)uniqueId
{
    return _recipientId;
}

- (nullable NSString *)contactFullName
{
    NSString *displayFullName = self.contact.fullName.filterStringForDisplay;
    if (DTParamsUtils.validateString(displayFullName)) {
        return displayFullName;
    }
    
    if (DTParamsUtils.validateString(self.contact.groupDisplayName)) {
        return self.contact.groupDisplayName;
    }
    
    if (DTParamsUtils.validateString(self.recipientId)) {
        return self.recipientId;
    }
    
    return nil;
}

- (nullable NSString *)remarkName
{
    NSString *remark = self.contact.remark;
    if (DTParamsUtils.validateString(remark)) {
        remark = [[DTConversationSettingHelper sharedInstance] decryptRemarkString:remark receptid:self.recipientId];
    }
    return remark.filterStringForDisplay;
}

- (NSString *)multipleAccountLabelText
{
    return _multipleAccountLabelText.filterStringForDisplay;
}

- (BOOL)isLocalSignalAccount {
    
    return [self.recipientId isEqualToString:[TSAccountManager localNumber]];
}

+ (BOOL)isExt:(NSString *)recipientId {
   
    __block BOOL isExt = NO;
    [self.databaseStorage readWithBlock:^(SDSAnyReadTransaction * _Nonnull transaction) {
        isExt = [self isExt:recipientId transaction:transaction];
    }];
    return isExt;
}

+ (BOOL)isExt:(NSString *)recipientId transaction:(SDSAnyReadTransaction *)transaction {
    return NO;
}

- (BOOL)isBot {
    return self.contact.extId.integerValue == 3 || self.recipientId.length == 6;
}

+ (TSFTSIndexMode)FTSIndexMode
{
    return TSFTSIndexModeAlways;
}

#pragma mark - HOOK

- (void)anyDidInsertWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidInsertWithTransaction:transaction];

    [self.modelReadCaches.signalAccountReadCache didInsertOrUpdateSignalAccount:self transaction:transaction];
}

- (void)anyDidUpdateWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidUpdateWithTransaction:transaction];

    [self.modelReadCaches.signalAccountReadCache didInsertOrUpdateSignalAccount:self transaction:transaction];
}

- (void)anyDidRemoveWithTransaction:(SDSAnyWriteTransaction *)transaction
{
    [super anyDidRemoveWithTransaction:transaction];

    [self.modelReadCaches.signalAccountReadCache didRemoveSignalAccount:self transaction:transaction];
}

@end

NS_ASSUME_NONNULL_END
