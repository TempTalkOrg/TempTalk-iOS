//
//  TSMessageReadPosition.m
//  TTServiceKit
//
//  Created by Kris.s on 2022/11/4.
//

#import "TSMessageReadPosition.h"
#import "DTReadPositionEntity.h"
#import <SignalCoreKit/NSDate+OWS.h>
#import <TTServiceKit/TTServiceKit-Swift.h>

@implementation TSMessageReadPosition

// --- CODE GENERATION MARKER

// This snippet is generated by /Scripts/sds_codegen/sds_generate.py. Do not manually edit it, instead run `sds_codegen.sh`. Please contact Kris for support.

// clang-format off

- (instancetype)initWithGrdbId:(int64_t)grdbId
                      uniqueId:(NSString *)uniqueId
               creationTimestamp:(uint64_t)creationTimestamp
             maxNotifySequenceId:(uint64_t)maxNotifySequenceId
                   maxServerTime:(uint64_t)maxServerTime
                          readAt:(uint64_t)readAt
                     recipientId:(NSString *)recipientId
                  uniqueThreadId:(NSString *)uniqueThreadId
                     updateCount:(uint64_t)updateCount
{
    self = [super initWithGrdbId:grdbId
                        uniqueId:uniqueId];

    if (!self) {
        return self;
    }

    _creationTimestamp = creationTimestamp;
    _maxNotifySequenceId = maxNotifySequenceId;
    _maxServerTime = maxServerTime;
    _readAt = readAt;
    _recipientId = recipientId;
    _uniqueThreadId = uniqueThreadId;
    _updateCount = updateCount;

    return self;
}

// clang-format on

// --- CODE GENERATION MARKER

- (instancetype)initWithUniqueThreadId:(NSString *)uniqueThreadId
                     recipientId:(NSString *)recipientId
                    readPosition:(DTReadPositionEntity *)readPosition {
    
    if(!recipientId.length) return nil;
    
    NSString *uniqueId = nil;
    if (![recipientId isEqualToString: [TSAccountManager localNumber]]) {
        uniqueId = [[self class] generateUniqueIdWithUniqueThreadId:uniqueThreadId
                                                        recipientId:recipientId];
    } else {
        uniqueId = [[self class] generateUniqueIdWithUniqueThreadId:uniqueThreadId
                                                        recipientId:recipientId
                                                          timestamp:readPosition.maxServerTime];
    }
        
    if(self = [super initWithUniqueId:uniqueId]){
        _uniqueThreadId = uniqueThreadId;
        _recipientId = recipientId;
        _readAt = readPosition.readAt;
        _maxServerTime = readPosition.maxServerTime;
        _maxNotifySequenceId = readPosition.maxNotifySequenceId;
        _creationTimestamp = [NSDate ows_millisecondTimeStamp];
    }
    return self;
}

- (NSString *)description {
    return [NSString stringWithFormat:@"maxServerTime: %llu, readAt: %llu, maxNotifySequenceId: %llu, uniqueThreadId: %@, recipientId: %@", self.maxServerTime, self.readAt, self.maxNotifySequenceId, self.uniqueThreadId, self.recipientId];
}

+ (NSString *)generateUniqueIdWithUniqueThreadId:(NSString *)uniqueThreadId
                                     recipientId:(NSString *)recipientId
                                       timestamp:(uint64_t)timestamp {
    return [NSString stringWithFormat: @"%@_%@_%llu", uniqueThreadId, recipientId, timestamp];
}

+ (NSString *)generateUniqueIdWithUniqueThreadId:(NSString *)uniqueThreadId
                                     recipientId:(NSString *)recipientId {
    return [NSString stringWithFormat: @"%@_%@", uniqueThreadId, recipientId];
}

- (void)updateOrInsertWithTransaction:(SDSAnyWriteTransaction *)transaction{
    
    if(self.maxServerTime <=0 || self.readAt <= 0){
        OWSProdError(@"updateOrInsertMessageReadPosition, invalid readPosition: maxServerTime or readAt <= 0!")
        return;
    }
    
    TSMessageReadPosition *oldReadPosition = [TSMessageReadPosition anyFetchWithUniqueId:self.uniqueId transaction:transaction];
    
    NSString *localNumber = [[TSAccountManager sharedInstance] localNumberWithTransaction:transaction];
    
    if(oldReadPosition){
        
        //他人只保留最新
        if(![self.recipientId isEqualToString:localNumber] &&
           self.maxServerTime > oldReadPosition.maxServerTime){
            
            [oldReadPosition anyUpdateWithTransaction:transaction
                                                block:^(TSMessageReadPosition * instance) {
                instance.readAt = self.readAt;
                instance.maxServerTime = self.maxServerTime;
                instance.maxNotifySequenceId = self.maxNotifySequenceId;
                instance.creationTimestamp = self.creationTimestamp;
            }];
            
        }
        
        if([self.recipientId isEqualToString:localNumber] &&
           self.readAt < oldReadPosition.readAt){
            [oldReadPosition anyUpdateWithTransaction:transaction
                                                block:^(TSMessageReadPosition * instance) {
                instance.readAt = self.readAt;
            }];
        }
        
    }else{
        
        if([self.recipientId isEqualToString:localNumber]){
            AnyMessageReadPositonFinder *finder = [[AnyMessageReadPositonFinder alloc] init];
            TSMessageReadPosition *readPosition = [finder latestRecipientReadPositionWithUniqueThreadId:self.uniqueThreadId
                                                                                            transaction:transaction];
            if(readPosition && readPosition.updateCount <= 5){
                NSTimeInterval minTimeDiff = 1000 * kMinuteInterval;
                NSTimeInterval currentTime = (NSTimeInterval)self.maxServerTime;
                NSTimeInterval latestTime = (NSTimeInterval)readPosition.maxServerTime;
                if(currentTime - latestTime >= minTimeDiff ||
                   latestTime - currentTime >= minTimeDiff){
                    [self anyInsertWithTransaction:transaction];
                }else if(currentTime - latestTime <= minTimeDiff &&
                         currentTime - latestTime > 0){
                    [readPosition anyUpdateWithTransaction:transaction
                                                     block:^(TSMessageReadPosition * instance) {
                        instance.readAt = self.readAt;
                        instance.maxServerTime = self.maxServerTime;
                        instance.maxNotifySequenceId = self.maxNotifySequenceId;
                        instance.creationTimestamp = self.creationTimestamp;
                        instance.updateCount = (readPosition.updateCount + 1);
                    }];
                }
            }else {
                [self anyInsertWithTransaction:transaction];
            }
            
        }else{
            [self anyInsertWithTransaction:transaction];
        }
    }
}

@end
