// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: E2EEMessage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// iOS - since we use a modern proto-compiler, we must specify
/// the legacy proto format.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct E2EEMessageProtos_Content: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt32 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var cipherText: Data {
    get {return _cipherText ?? Data()}
    set {_cipherText = newValue}
  }
  /// Returns true if `cipherText` has been explicitly set.
  var hasCipherText: Bool {return self._cipherText != nil}
  /// Clears the value of `cipherText`. Subsequent reads from it will return its default value.
  mutating func clearCipherText() {self._cipherText = nil}

  var signedEkey: Data {
    get {return _signedEkey ?? Data()}
    set {_signedEkey = newValue}
  }
  /// Returns true if `signedEkey` has been explicitly set.
  var hasSignedEkey: Bool {return self._signedEkey != nil}
  /// Clears the value of `signedEkey`. Subsequent reads from it will return its default value.
  mutating func clearSignedEkey() {self._signedEkey = nil}

  var eKey: Data {
    get {return _eKey ?? Data()}
    set {_eKey = newValue}
  }
  /// Returns true if `eKey` has been explicitly set.
  var hasEKey: Bool {return self._eKey != nil}
  /// Clears the value of `eKey`. Subsequent reads from it will return its default value.
  mutating func clearEKey() {self._eKey = nil}

  var identityKey: Data {
    get {return _identityKey ?? Data()}
    set {_identityKey = newValue}
  }
  /// Returns true if `identityKey` has been explicitly set.
  var hasIdentityKey: Bool {return self._identityKey != nil}
  /// Clears the value of `identityKey`. Subsequent reads from it will return its default value.
  mutating func clearIdentityKey() {self._identityKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: UInt32? = nil
  fileprivate var _cipherText: Data? = nil
  fileprivate var _signedEkey: Data? = nil
  fileprivate var _eKey: Data? = nil
  fileprivate var _identityKey: Data? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "E2EEMessageProtos"

extension E2EEMessageProtos_Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Content"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "cipherText"),
    3: .same(proto: "signedEKey"),
    4: .same(proto: "eKey"),
    5: .same(proto: "identityKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._cipherText) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._signedEkey) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._eKey) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._identityKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._cipherText {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._signedEkey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._eKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._identityKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: E2EEMessageProtos_Content, rhs: E2EEMessageProtos_Content) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._cipherText != rhs._cipherText {return false}
    if lhs._signedEkey != rhs._signedEkey {return false}
    if lhs._eKey != rhs._eKey {return false}
    if lhs._identityKey != rhs._identityKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
